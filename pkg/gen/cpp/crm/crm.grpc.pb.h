// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: crm/crm.proto
#ifndef GRPC_crm_2fcrm_2eproto__INCLUDED
#define GRPC_crm_2fcrm_2eproto__INCLUDED

#include "crm/crm.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace crm {

// -----------------------------------------------------------------------------
// Service Definition
// -----------------------------------------------------------------------------
class CRMService final {
 public:
  static constexpr char const* service_full_name() {
    return "crm.CRMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Leads
    virtual ::grpc::Status CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::crm::CreateLeadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateLeadResponse>> AsyncCreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateLeadResponse>>(AsyncCreateLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateLeadResponse>> PrepareAsyncCreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateLeadResponse>>(PrepareAsyncCreateLeadRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::crm::GetLeadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetLeadResponse>> AsyncGetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetLeadResponse>>(AsyncGetLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetLeadResponse>> PrepareAsyncGetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetLeadResponse>>(PrepareAsyncGetLeadRaw(context, request, cq));
    }
    virtual ::grpc::Status ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::crm::ListLeadsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListLeadsResponse>> AsyncListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListLeadsResponse>>(AsyncListLeadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListLeadsResponse>> PrepareAsyncListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListLeadsResponse>>(PrepareAsyncListLeadsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::crm::UpdateLeadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateLeadResponse>> AsyncUpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateLeadResponse>>(AsyncUpdateLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateLeadResponse>> PrepareAsyncUpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateLeadResponse>>(PrepareAsyncUpdateLeadRaw(context, request, cq));
    }
    virtual ::grpc::Status PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::crm::PatchLeadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::PatchLeadResponse>> AsyncPatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::PatchLeadResponse>>(AsyncPatchLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::PatchLeadResponse>> PrepareAsyncPatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::PatchLeadResponse>>(PrepareAsyncPatchLeadRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::crm::DeleteLeadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteLeadResponse>> AsyncDeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteLeadResponse>>(AsyncDeleteLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteLeadResponse>> PrepareAsyncDeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteLeadResponse>>(PrepareAsyncDeleteLeadRaw(context, request, cq));
    }
    // Tasks
    virtual ::grpc::Status CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::crm::CreateTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateTaskResponse>> AsyncCreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateTaskResponse>>(AsyncCreateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateTaskResponse>> PrepareAsyncCreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateTaskResponse>>(PrepareAsyncCreateTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::crm::GetTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetTaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetTaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetTaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetTaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::crm::ListTasksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListTasksResponse>> AsyncListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListTasksResponse>>(AsyncListTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListTasksResponse>> PrepareAsyncListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListTasksResponse>>(PrepareAsyncListTasksRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::crm::UpdateTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateTaskResponse>> AsyncUpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateTaskResponse>>(AsyncUpdateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateTaskResponse>> PrepareAsyncUpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateTaskResponse>>(PrepareAsyncUpdateTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::crm::DeleteTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteTaskResponse>> AsyncDeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteTaskResponse>>(AsyncDeleteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteTaskResponse>> PrepareAsyncDeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteTaskResponse>>(PrepareAsyncDeleteTaskRaw(context, request, cq));
    }
    // Notes
    virtual ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::crm::CreateNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateNoteResponse>> AsyncCreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateNoteResponse>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateNoteResponse>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateNoteResponse>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::crm::GetNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetNoteResponse>> AsyncGetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetNoteResponse>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetNoteResponse>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetNoteResponse>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::crm::ListNotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListNotesResponse>> AsyncListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListNotesResponse>>(AsyncListNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListNotesResponse>> PrepareAsyncListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListNotesResponse>>(PrepareAsyncListNotesRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::crm::UpdateNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateNoteResponse>> AsyncUpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateNoteResponse>>(AsyncUpdateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateNoteResponse>> PrepareAsyncUpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateNoteResponse>>(PrepareAsyncUpdateNoteRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::crm::DeleteNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteNoteResponse>> AsyncDeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteNoteResponse>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteNoteResponse>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteNoteResponse>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    // Chat Messages
    virtual ::grpc::Status CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::crm::CreateChatMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateChatMessageResponse>> AsyncCreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateChatMessageResponse>>(AsyncCreateChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateChatMessageResponse>> PrepareAsyncCreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateChatMessageResponse>>(PrepareAsyncCreateChatMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::crm::GetChatMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetChatMessageResponse>> AsyncGetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetChatMessageResponse>>(AsyncGetChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetChatMessageResponse>> PrepareAsyncGetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetChatMessageResponse>>(PrepareAsyncGetChatMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::crm::ListChatMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListChatMessagesResponse>> AsyncListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListChatMessagesResponse>>(AsyncListChatMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListChatMessagesResponse>> PrepareAsyncListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListChatMessagesResponse>>(PrepareAsyncListChatMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::crm::UpdateChatMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateChatMessageResponse>> AsyncUpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateChatMessageResponse>>(AsyncUpdateChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateChatMessageResponse>> PrepareAsyncUpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateChatMessageResponse>>(PrepareAsyncUpdateChatMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::crm::DeleteChatMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteChatMessageResponse>> AsyncDeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteChatMessageResponse>>(AsyncDeleteChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteChatMessageResponse>> PrepareAsyncDeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteChatMessageResponse>>(PrepareAsyncDeleteChatMessageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Leads
      virtual void CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Tasks
      virtual void CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Notes
      virtual void CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Chat Messages
      virtual void CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateLeadResponse>* AsyncCreateLeadRaw(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateLeadResponse>* PrepareAsyncCreateLeadRaw(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetLeadResponse>* AsyncGetLeadRaw(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetLeadResponse>* PrepareAsyncGetLeadRaw(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListLeadsResponse>* AsyncListLeadsRaw(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListLeadsResponse>* PrepareAsyncListLeadsRaw(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateLeadResponse>* AsyncUpdateLeadRaw(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateLeadResponse>* PrepareAsyncUpdateLeadRaw(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::PatchLeadResponse>* AsyncPatchLeadRaw(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::PatchLeadResponse>* PrepareAsyncPatchLeadRaw(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteLeadResponse>* AsyncDeleteLeadRaw(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteLeadResponse>* PrepareAsyncDeleteLeadRaw(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateTaskResponse>* AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateTaskResponse>* PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetTaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetTaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListTasksResponse>* AsyncListTasksRaw(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListTasksResponse>* PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateTaskResponse>* AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateTaskResponse>* PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteTaskResponse>* AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteTaskResponse>* PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateNoteResponse>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateNoteResponse>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetNoteResponse>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetNoteResponse>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListNotesResponse>* AsyncListNotesRaw(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListNotesResponse>* PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateNoteResponse>* AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateNoteResponse>* PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteNoteResponse>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteNoteResponse>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateChatMessageResponse>* AsyncCreateChatMessageRaw(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::CreateChatMessageResponse>* PrepareAsyncCreateChatMessageRaw(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetChatMessageResponse>* AsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::GetChatMessageResponse>* PrepareAsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListChatMessagesResponse>* AsyncListChatMessagesRaw(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::ListChatMessagesResponse>* PrepareAsyncListChatMessagesRaw(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateChatMessageResponse>* AsyncUpdateChatMessageRaw(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::UpdateChatMessageResponse>* PrepareAsyncUpdateChatMessageRaw(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteChatMessageResponse>* AsyncDeleteChatMessageRaw(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crm::DeleteChatMessageResponse>* PrepareAsyncDeleteChatMessageRaw(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::crm::CreateLeadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>> AsyncCreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>>(AsyncCreateLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>> PrepareAsyncCreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>>(PrepareAsyncCreateLeadRaw(context, request, cq));
    }
    ::grpc::Status GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::crm::GetLeadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>> AsyncGetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>>(AsyncGetLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>> PrepareAsyncGetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>>(PrepareAsyncGetLeadRaw(context, request, cq));
    }
    ::grpc::Status ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::crm::ListLeadsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>> AsyncListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>>(AsyncListLeadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>> PrepareAsyncListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>>(PrepareAsyncListLeadsRaw(context, request, cq));
    }
    ::grpc::Status UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::crm::UpdateLeadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>> AsyncUpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>>(AsyncUpdateLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>> PrepareAsyncUpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>>(PrepareAsyncUpdateLeadRaw(context, request, cq));
    }
    ::grpc::Status PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::crm::PatchLeadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>> AsyncPatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>>(AsyncPatchLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>> PrepareAsyncPatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>>(PrepareAsyncPatchLeadRaw(context, request, cq));
    }
    ::grpc::Status DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::crm::DeleteLeadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>> AsyncDeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>>(AsyncDeleteLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>> PrepareAsyncDeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>>(PrepareAsyncDeleteLeadRaw(context, request, cq));
    }
    ::grpc::Status CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::crm::CreateTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>> AsyncCreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>>(AsyncCreateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>> PrepareAsyncCreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>>(PrepareAsyncCreateTaskRaw(context, request, cq));
    }
    ::grpc::Status GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::crm::GetTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    ::grpc::Status ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::crm::ListTasksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>> AsyncListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>>(AsyncListTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>> PrepareAsyncListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>>(PrepareAsyncListTasksRaw(context, request, cq));
    }
    ::grpc::Status UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::crm::UpdateTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>> AsyncUpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>>(AsyncUpdateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>> PrepareAsyncUpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>>(PrepareAsyncUpdateTaskRaw(context, request, cq));
    }
    ::grpc::Status DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::crm::DeleteTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>> AsyncDeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>>(AsyncDeleteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>> PrepareAsyncDeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>>(PrepareAsyncDeleteTaskRaw(context, request, cq));
    }
    ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::crm::CreateNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>> AsyncCreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    ::grpc::Status GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::crm::GetNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>> AsyncGetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    ::grpc::Status ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::crm::ListNotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>> AsyncListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>>(AsyncListNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>> PrepareAsyncListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>>(PrepareAsyncListNotesRaw(context, request, cq));
    }
    ::grpc::Status UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::crm::UpdateNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>> AsyncUpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>>(AsyncUpdateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>> PrepareAsyncUpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>>(PrepareAsyncUpdateNoteRaw(context, request, cq));
    }
    ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::crm::DeleteNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>> AsyncDeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    ::grpc::Status CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::crm::CreateChatMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>> AsyncCreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>>(AsyncCreateChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>> PrepareAsyncCreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>>(PrepareAsyncCreateChatMessageRaw(context, request, cq));
    }
    ::grpc::Status GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::crm::GetChatMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>> AsyncGetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>>(AsyncGetChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>> PrepareAsyncGetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>>(PrepareAsyncGetChatMessageRaw(context, request, cq));
    }
    ::grpc::Status ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::crm::ListChatMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>> AsyncListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>>(AsyncListChatMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>> PrepareAsyncListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>>(PrepareAsyncListChatMessagesRaw(context, request, cq));
    }
    ::grpc::Status UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::crm::UpdateChatMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>> AsyncUpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>>(AsyncUpdateChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>> PrepareAsyncUpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>>(PrepareAsyncUpdateChatMessageRaw(context, request, cq));
    }
    ::grpc::Status DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::crm::DeleteChatMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>> AsyncDeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>>(AsyncDeleteChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>> PrepareAsyncDeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>>(PrepareAsyncDeleteChatMessageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>* AsyncCreateLeadRaw(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>* PrepareAsyncCreateLeadRaw(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>* AsyncGetLeadRaw(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>* PrepareAsyncGetLeadRaw(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>* AsyncListLeadsRaw(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>* PrepareAsyncListLeadsRaw(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>* AsyncUpdateLeadRaw(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>* PrepareAsyncUpdateLeadRaw(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>* AsyncPatchLeadRaw(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>* PrepareAsyncPatchLeadRaw(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>* AsyncDeleteLeadRaw(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>* PrepareAsyncDeleteLeadRaw(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>* AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>* PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>* AsyncListTasksRaw(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>* PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>* AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>* PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>* AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>* PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>* AsyncListNotesRaw(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>* PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>* AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>* PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>* AsyncCreateChatMessageRaw(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>* PrepareAsyncCreateChatMessageRaw(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>* AsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>* PrepareAsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>* AsyncListChatMessagesRaw(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>* PrepareAsyncListChatMessagesRaw(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>* AsyncUpdateChatMessageRaw(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>* PrepareAsyncUpdateChatMessageRaw(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>* AsyncDeleteChatMessageRaw(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>* PrepareAsyncDeleteChatMessageRaw(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLead_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLead_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLeads_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateLead_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchLead_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLead_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTask_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTask_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNote_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNotes_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNote_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChatMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChatMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ListChatMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateChatMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteChatMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Leads
    virtual ::grpc::Status CreateLead(::grpc::ServerContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response);
    virtual ::grpc::Status GetLead(::grpc::ServerContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response);
    virtual ::grpc::Status ListLeads(::grpc::ServerContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response);
    virtual ::grpc::Status UpdateLead(::grpc::ServerContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response);
    virtual ::grpc::Status PatchLead(::grpc::ServerContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response);
    virtual ::grpc::Status DeleteLead(::grpc::ServerContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response);
    // Tasks
    virtual ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response);
    virtual ::grpc::Status GetTask(::grpc::ServerContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response);
    virtual ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response);
    virtual ::grpc::Status UpdateTask(::grpc::ServerContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response);
    virtual ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response);
    // Notes
    virtual ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response);
    virtual ::grpc::Status GetNote(::grpc::ServerContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response);
    virtual ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response);
    virtual ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response);
    virtual ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response);
    // Chat Messages
    virtual ::grpc::Status CreateChatMessage(::grpc::ServerContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response);
    virtual ::grpc::Status GetChatMessage(::grpc::ServerContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response);
    virtual ::grpc::Status ListChatMessages(::grpc::ServerContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response);
    virtual ::grpc::Status UpdateChatMessage(::grpc::ServerContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response);
    virtual ::grpc::Status DeleteChatMessage(::grpc::ServerContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateLead() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLead(::grpc::ServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLead(::grpc::ServerContext* context, ::crm::CreateLeadRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::CreateLeadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLead() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLead(::grpc::ServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLead(::grpc::ServerContext* context, ::crm::GetLeadRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::GetLeadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLeads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListLeads() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListLeads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLeads(::grpc::ServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLeads(::grpc::ServerContext* context, ::crm::ListLeadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::ListLeadsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateLead() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLead(::grpc::ServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLead(::grpc::ServerContext* context, ::crm::UpdateLeadRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::UpdateLeadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchLead() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PatchLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLead(::grpc::ServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchLead(::grpc::ServerContext* context, ::crm::PatchLeadRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::PatchLeadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLead() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLead(::grpc::ServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLead(::grpc::ServerContext* context, ::crm::DeleteLeadRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::DeleteLeadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTask() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTask(::grpc::ServerContext* context, ::crm::CreateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::CreateTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTask() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::crm::GetTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::GetTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTasks() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTasks(::grpc::ServerContext* context, ::crm::ListTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::ListTasksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTask() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTask(::grpc::ServerContext* context, ::crm::UpdateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::UpdateTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTask() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTask(::grpc::ServerContext* context, ::crm::DeleteTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::DeleteTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNote() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::crm::CreateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::CreateNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNote() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::crm::GetNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::GetNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNotes() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotes(::grpc::ServerContext* context, ::crm::ListNotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::ListNotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNote() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNote(::grpc::ServerContext* context, ::crm::UpdateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::UpdateNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNote() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::crm::DeleteNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::DeleteNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateChatMessage() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_CreateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChatMessage(::grpc::ServerContext* context, ::crm::CreateChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::CreateChatMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatMessage(::grpc::ServerContext* context, ::crm::GetChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::GetChatMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListChatMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListChatMessages() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_ListChatMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChatMessages(::grpc::ServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListChatMessages(::grpc::ServerContext* context, ::crm::ListChatMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::ListChatMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateChatMessage() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_UpdateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateChatMessage(::grpc::ServerContext* context, ::crm::UpdateChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::UpdateChatMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteChatMessage() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_DeleteChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatMessage(::grpc::ServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChatMessage(::grpc::ServerContext* context, ::crm::DeleteChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::crm::DeleteChatMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateLead<WithAsyncMethod_GetLead<WithAsyncMethod_ListLeads<WithAsyncMethod_UpdateLead<WithAsyncMethod_PatchLead<WithAsyncMethod_DeleteLead<WithAsyncMethod_CreateTask<WithAsyncMethod_GetTask<WithAsyncMethod_ListTasks<WithAsyncMethod_UpdateTask<WithAsyncMethod_DeleteTask<WithAsyncMethod_CreateNote<WithAsyncMethod_GetNote<WithAsyncMethod_ListNotes<WithAsyncMethod_UpdateNote<WithAsyncMethod_DeleteNote<WithAsyncMethod_CreateChatMessage<WithAsyncMethod_GetChatMessage<WithAsyncMethod_ListChatMessages<WithAsyncMethod_UpdateChatMessage<WithAsyncMethod_DeleteChatMessage<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateLead() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::CreateLeadRequest, ::crm::CreateLeadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response) { return this->CreateLead(context, request, response); }));}
    void SetMessageAllocatorFor_CreateLead(
        ::grpc::MessageAllocator< ::crm::CreateLeadRequest, ::crm::CreateLeadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::CreateLeadRequest, ::crm::CreateLeadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLead(::grpc::ServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLead(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLead() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::GetLeadRequest, ::crm::GetLeadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response) { return this->GetLead(context, request, response); }));}
    void SetMessageAllocatorFor_GetLead(
        ::grpc::MessageAllocator< ::crm::GetLeadRequest, ::crm::GetLeadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::GetLeadRequest, ::crm::GetLeadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLead(::grpc::ServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLead(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListLeads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListLeads() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::ListLeadsRequest, ::crm::ListLeadsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response) { return this->ListLeads(context, request, response); }));}
    void SetMessageAllocatorFor_ListLeads(
        ::grpc::MessageAllocator< ::crm::ListLeadsRequest, ::crm::ListLeadsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::ListLeadsRequest, ::crm::ListLeadsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListLeads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLeads(::grpc::ServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLeads(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateLead() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response) { return this->UpdateLead(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateLead(
        ::grpc::MessageAllocator< ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLead(::grpc::ServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateLead(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchLead() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::PatchLeadRequest, ::crm::PatchLeadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response) { return this->PatchLead(context, request, response); }));}
    void SetMessageAllocatorFor_PatchLead(
        ::grpc::MessageAllocator< ::crm::PatchLeadRequest, ::crm::PatchLeadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::PatchLeadRequest, ::crm::PatchLeadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLead(::grpc::ServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchLead(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteLead() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response) { return this->DeleteLead(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLead(
        ::grpc::MessageAllocator< ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLead(::grpc::ServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLead(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTask() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::CreateTaskRequest, ::crm::CreateTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response) { return this->CreateTask(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTask(
        ::grpc::MessageAllocator< ::crm::CreateTaskRequest, ::crm::CreateTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::CreateTaskRequest, ::crm::CreateTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::GetTaskRequest, ::crm::GetTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response) { return this->GetTask(context, request, response); }));}
    void SetMessageAllocatorFor_GetTask(
        ::grpc::MessageAllocator< ::crm::GetTaskRequest, ::crm::GetTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::GetTaskRequest, ::crm::GetTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTasks() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::ListTasksRequest, ::crm::ListTasksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response) { return this->ListTasks(context, request, response); }));}
    void SetMessageAllocatorFor_ListTasks(
        ::grpc::MessageAllocator< ::crm::ListTasksRequest, ::crm::ListTasksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::ListTasksRequest, ::crm::ListTasksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTask() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response) { return this->UpdateTask(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTask(
        ::grpc::MessageAllocator< ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTask() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response) { return this->DeleteTask(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTask(
        ::grpc::MessageAllocator< ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTask(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNote() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::CreateNoteRequest, ::crm::CreateNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response) { return this->CreateNote(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNote(
        ::grpc::MessageAllocator< ::crm::CreateNoteRequest, ::crm::CreateNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::CreateNoteRequest, ::crm::CreateNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNote(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNote() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::GetNoteRequest, ::crm::GetNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response) { return this->GetNote(context, request, response); }));}
    void SetMessageAllocatorFor_GetNote(
        ::grpc::MessageAllocator< ::crm::GetNoteRequest, ::crm::GetNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::GetNoteRequest, ::crm::GetNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNote(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNotes() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::ListNotesRequest, ::crm::ListNotesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response) { return this->ListNotes(context, request, response); }));}
    void SetMessageAllocatorFor_ListNotes(
        ::grpc::MessageAllocator< ::crm::ListNotesRequest, ::crm::ListNotesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::ListNotesRequest, ::crm::ListNotesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotes(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNote() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response) { return this->UpdateNote(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNote(
        ::grpc::MessageAllocator< ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNote(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNote() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response) { return this->DeleteNote(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNote(
        ::grpc::MessageAllocator< ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNote(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateChatMessage() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response) { return this->CreateChatMessage(context, request, response); }));}
    void SetMessageAllocatorFor_CreateChatMessage(
        ::grpc::MessageAllocator< ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response) { return this->GetChatMessage(context, request, response); }));}
    void SetMessageAllocatorFor_GetChatMessage(
        ::grpc::MessageAllocator< ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListChatMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListChatMessages() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response) { return this->ListChatMessages(context, request, response); }));}
    void SetMessageAllocatorFor_ListChatMessages(
        ::grpc::MessageAllocator< ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListChatMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChatMessages(::grpc::ServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListChatMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateChatMessage() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response) { return this->UpdateChatMessage(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateChatMessage(
        ::grpc::MessageAllocator< ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteChatMessage() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response) { return this->DeleteChatMessage(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteChatMessage(
        ::grpc::MessageAllocator< ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatMessage(::grpc::ServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateLead<WithCallbackMethod_GetLead<WithCallbackMethod_ListLeads<WithCallbackMethod_UpdateLead<WithCallbackMethod_PatchLead<WithCallbackMethod_DeleteLead<WithCallbackMethod_CreateTask<WithCallbackMethod_GetTask<WithCallbackMethod_ListTasks<WithCallbackMethod_UpdateTask<WithCallbackMethod_DeleteTask<WithCallbackMethod_CreateNote<WithCallbackMethod_GetNote<WithCallbackMethod_ListNotes<WithCallbackMethod_UpdateNote<WithCallbackMethod_DeleteNote<WithCallbackMethod_CreateChatMessage<WithCallbackMethod_GetChatMessage<WithCallbackMethod_ListChatMessages<WithCallbackMethod_UpdateChatMessage<WithCallbackMethod_DeleteChatMessage<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateLead() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLead(::grpc::ServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLead() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLead(::grpc::ServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLeads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListLeads() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListLeads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLeads(::grpc::ServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateLead() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLead(::grpc::ServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchLead() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PatchLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLead(::grpc::ServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLead() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLead(::grpc::ServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTask() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTask() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTasks() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTask() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTask() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNote() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNote() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNotes() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNote() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNote() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateChatMessage() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_CreateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListChatMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListChatMessages() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_ListChatMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChatMessages(::grpc::ServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateChatMessage() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_UpdateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteChatMessage() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_DeleteChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatMessage(::grpc::ServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateLead() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLead(::grpc::ServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLead() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLead(::grpc::ServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLeads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListLeads() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListLeads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLeads(::grpc::ServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLeads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateLead() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLead(::grpc::ServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchLead() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PatchLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLead(::grpc::ServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLead() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLead(::grpc::ServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTask() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTask() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTasks() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTask() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTask() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNote() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNote() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNotes() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNote() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNote() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateChatMessage() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_CreateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListChatMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListChatMessages() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_ListChatMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChatMessages(::grpc::ServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListChatMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateChatMessage() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_UpdateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteChatMessage() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_DeleteChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatMessage(::grpc::ServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateLead() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLead(::grpc::ServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLead() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLead(::grpc::ServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListLeads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListLeads() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListLeads(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListLeads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLeads(::grpc::ServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLeads(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateLead() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLead(::grpc::ServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchLead() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLead(::grpc::ServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteLead() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLead(::grpc::ServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTask() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTasks() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTasks(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTask() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTask() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNote() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNote() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNotes() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNotes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNote() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNote() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateChatMessage() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateChatMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChatMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListChatMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListChatMessages() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListChatMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListChatMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChatMessages(::grpc::ServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListChatMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateChatMessage() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateChatMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteChatMessage() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteChatMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatMessage(::grpc::ServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateLead() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::CreateLeadRequest, ::crm::CreateLeadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::CreateLeadRequest, ::crm::CreateLeadResponse>* streamer) {
                       return this->StreamedCreateLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLead(::grpc::ServerContext* /*context*/, const ::crm::CreateLeadRequest* /*request*/, ::crm::CreateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::CreateLeadRequest,::crm::CreateLeadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLead() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::GetLeadRequest, ::crm::GetLeadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::GetLeadRequest, ::crm::GetLeadResponse>* streamer) {
                       return this->StreamedGetLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLead(::grpc::ServerContext* /*context*/, const ::crm::GetLeadRequest* /*request*/, ::crm::GetLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::GetLeadRequest,::crm::GetLeadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLeads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListLeads() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::ListLeadsRequest, ::crm::ListLeadsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::ListLeadsRequest, ::crm::ListLeadsResponse>* streamer) {
                       return this->StreamedListLeads(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListLeads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLeads(::grpc::ServerContext* /*context*/, const ::crm::ListLeadsRequest* /*request*/, ::crm::ListLeadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLeads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::ListLeadsRequest,::crm::ListLeadsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateLead() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse>* streamer) {
                       return this->StreamedUpdateLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateLead(::grpc::ServerContext* /*context*/, const ::crm::UpdateLeadRequest* /*request*/, ::crm::UpdateLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::UpdateLeadRequest,::crm::UpdateLeadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchLead() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::PatchLeadRequest, ::crm::PatchLeadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::PatchLeadRequest, ::crm::PatchLeadResponse>* streamer) {
                       return this->StreamedPatchLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchLead(::grpc::ServerContext* /*context*/, const ::crm::PatchLeadRequest* /*request*/, ::crm::PatchLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::PatchLeadRequest,::crm::PatchLeadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLead() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse>* streamer) {
                       return this->StreamedDeleteLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLead(::grpc::ServerContext* /*context*/, const ::crm::DeleteLeadRequest* /*request*/, ::crm::DeleteLeadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::DeleteLeadRequest,::crm::DeleteLeadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTask() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::CreateTaskRequest, ::crm::CreateTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::CreateTaskRequest, ::crm::CreateTaskResponse>* streamer) {
                       return this->StreamedCreateTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::crm::CreateTaskRequest* /*request*/, ::crm::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::CreateTaskRequest,::crm::CreateTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTask() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::GetTaskRequest, ::crm::GetTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::GetTaskRequest, ::crm::GetTaskResponse>* streamer) {
                       return this->StreamedGetTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::crm::GetTaskRequest* /*request*/, ::crm::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::GetTaskRequest,::crm::GetTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTasks() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::ListTasksRequest, ::crm::ListTasksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::ListTasksRequest, ::crm::ListTasksResponse>* streamer) {
                       return this->StreamedListTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::crm::ListTasksRequest* /*request*/, ::crm::ListTasksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::ListTasksRequest,::crm::ListTasksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTask() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse>* streamer) {
                       return this->StreamedUpdateTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::crm::UpdateTaskRequest* /*request*/, ::crm::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::UpdateTaskRequest,::crm::UpdateTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTask() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse>* streamer) {
                       return this->StreamedDeleteTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* /*context*/, const ::crm::DeleteTaskRequest* /*request*/, ::crm::DeleteTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::DeleteTaskRequest,::crm::DeleteTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNote() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::CreateNoteRequest, ::crm::CreateNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::CreateNoteRequest, ::crm::CreateNoteResponse>* streamer) {
                       return this->StreamedCreateNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::crm::CreateNoteRequest* /*request*/, ::crm::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::CreateNoteRequest,::crm::CreateNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNote() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::GetNoteRequest, ::crm::GetNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::GetNoteRequest, ::crm::GetNoteResponse>* streamer) {
                       return this->StreamedGetNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::crm::GetNoteRequest* /*request*/, ::crm::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::GetNoteRequest,::crm::GetNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNotes() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::ListNotesRequest, ::crm::ListNotesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::ListNotesRequest, ::crm::ListNotesResponse>* streamer) {
                       return this->StreamedListNotes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* /*context*/, const ::crm::ListNotesRequest* /*request*/, ::crm::ListNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::ListNotesRequest,::crm::ListNotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNote() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse>* streamer) {
                       return this->StreamedUpdateNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* /*context*/, const ::crm::UpdateNoteRequest* /*request*/, ::crm::UpdateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::UpdateNoteRequest,::crm::UpdateNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNote() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse>* streamer) {
                       return this->StreamedDeleteNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::crm::DeleteNoteRequest* /*request*/, ::crm::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::DeleteNoteRequest,::crm::DeleteNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateChatMessage() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse>* streamer) {
                       return this->StreamedCreateChatMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::CreateChatMessageRequest* /*request*/, ::crm::CreateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::CreateChatMessageRequest,::crm::CreateChatMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse>* streamer) {
                       return this->StreamedGetChatMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* /*context*/, const ::crm::GetChatMessageRequest* /*request*/, ::crm::GetChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::GetChatMessageRequest,::crm::GetChatMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListChatMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListChatMessages() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse>* streamer) {
                       return this->StreamedListChatMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListChatMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListChatMessages(::grpc::ServerContext* /*context*/, const ::crm::ListChatMessagesRequest* /*request*/, ::crm::ListChatMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListChatMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::ListChatMessagesRequest,::crm::ListChatMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateChatMessage() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse>* streamer) {
                       return this->StreamedUpdateChatMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateChatMessage(::grpc::ServerContext* /*context*/, const ::crm::UpdateChatMessageRequest* /*request*/, ::crm::UpdateChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::UpdateChatMessageRequest,::crm::UpdateChatMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteChatMessage() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse>* streamer) {
                       return this->StreamedDeleteChatMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteChatMessage(::grpc::ServerContext* /*context*/, const ::crm::DeleteChatMessageRequest* /*request*/, ::crm::DeleteChatMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crm::DeleteChatMessageRequest,::crm::DeleteChatMessageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateLead<WithStreamedUnaryMethod_GetLead<WithStreamedUnaryMethod_ListLeads<WithStreamedUnaryMethod_UpdateLead<WithStreamedUnaryMethod_PatchLead<WithStreamedUnaryMethod_DeleteLead<WithStreamedUnaryMethod_CreateTask<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_ListTasks<WithStreamedUnaryMethod_UpdateTask<WithStreamedUnaryMethod_DeleteTask<WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_ListNotes<WithStreamedUnaryMethod_UpdateNote<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_CreateChatMessage<WithStreamedUnaryMethod_GetChatMessage<WithStreamedUnaryMethod_ListChatMessages<WithStreamedUnaryMethod_UpdateChatMessage<WithStreamedUnaryMethod_DeleteChatMessage<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateLead<WithStreamedUnaryMethod_GetLead<WithStreamedUnaryMethod_ListLeads<WithStreamedUnaryMethod_UpdateLead<WithStreamedUnaryMethod_PatchLead<WithStreamedUnaryMethod_DeleteLead<WithStreamedUnaryMethod_CreateTask<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_ListTasks<WithStreamedUnaryMethod_UpdateTask<WithStreamedUnaryMethod_DeleteTask<WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_ListNotes<WithStreamedUnaryMethod_UpdateNote<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_CreateChatMessage<WithStreamedUnaryMethod_GetChatMessage<WithStreamedUnaryMethod_ListChatMessages<WithStreamedUnaryMethod_UpdateChatMessage<WithStreamedUnaryMethod_DeleteChatMessage<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace crm


#endif  // GRPC_crm_2fcrm_2eproto__INCLUDED

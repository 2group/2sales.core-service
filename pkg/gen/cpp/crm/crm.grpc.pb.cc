// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: crm/crm.proto

#include "crm/crm.pb.h"
#include "crm/crm.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace crm {

static const char* CRMService_method_names[] = {
  "/crm.CRMService/CreateLead",
  "/crm.CRMService/GetLead",
  "/crm.CRMService/ListLeads",
  "/crm.CRMService/UpdateLead",
  "/crm.CRMService/PatchLead",
  "/crm.CRMService/DeleteLead",
  "/crm.CRMService/CreateTask",
  "/crm.CRMService/GetTask",
  "/crm.CRMService/ListTasks",
  "/crm.CRMService/UpdateTask",
  "/crm.CRMService/DeleteTask",
  "/crm.CRMService/CreateNote",
  "/crm.CRMService/GetNote",
  "/crm.CRMService/ListNotes",
  "/crm.CRMService/UpdateNote",
  "/crm.CRMService/DeleteNote",
  "/crm.CRMService/CreateChatMessage",
  "/crm.CRMService/GetChatMessage",
  "/crm.CRMService/ListChatMessages",
  "/crm.CRMService/UpdateChatMessage",
  "/crm.CRMService/DeleteChatMessage",
};

std::unique_ptr< CRMService::Stub> CRMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CRMService::Stub> stub(new CRMService::Stub(channel, options));
  return stub;
}

CRMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateLead_(CRMService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLead_(CRMService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLeads_(CRMService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateLead_(CRMService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchLead_(CRMService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteLead_(CRMService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTask_(CRMService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTask_(CRMService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTasks_(CRMService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTask_(CRMService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTask_(CRMService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNote_(CRMService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNote_(CRMService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNotes_(CRMService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNote_(CRMService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNote_(CRMService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChatMessage_(CRMService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChatMessage_(CRMService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListChatMessages_(CRMService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateChatMessage_(CRMService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteChatMessage_(CRMService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CRMService::Stub::CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::crm::CreateLeadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::CreateLeadRequest, ::crm::CreateLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateLead_, context, request, response);
}

void CRMService::Stub::async::CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::CreateLeadRequest, ::crm::CreateLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLead_, context, request, response, std::move(f));
}

void CRMService::Stub::async::CreateLead(::grpc::ClientContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>* CRMService::Stub::PrepareAsyncCreateLeadRaw(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::CreateLeadResponse, ::crm::CreateLeadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateLeadResponse>* CRMService::Stub::AsyncCreateLeadRaw(::grpc::ClientContext* context, const ::crm::CreateLeadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::crm::GetLeadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::GetLeadRequest, ::crm::GetLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLead_, context, request, response);
}

void CRMService::Stub::async::GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::GetLeadRequest, ::crm::GetLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLead_, context, request, response, std::move(f));
}

void CRMService::Stub::async::GetLead(::grpc::ClientContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>* CRMService::Stub::PrepareAsyncGetLeadRaw(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::GetLeadResponse, ::crm::GetLeadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::GetLeadResponse>* CRMService::Stub::AsyncGetLeadRaw(::grpc::ClientContext* context, const ::crm::GetLeadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::crm::ListLeadsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::ListLeadsRequest, ::crm::ListLeadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListLeads_, context, request, response);
}

void CRMService::Stub::async::ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::ListLeadsRequest, ::crm::ListLeadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLeads_, context, request, response, std::move(f));
}

void CRMService::Stub::async::ListLeads(::grpc::ClientContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLeads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>* CRMService::Stub::PrepareAsyncListLeadsRaw(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::ListLeadsResponse, ::crm::ListLeadsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListLeads_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::ListLeadsResponse>* CRMService::Stub::AsyncListLeadsRaw(::grpc::ClientContext* context, const ::crm::ListLeadsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListLeadsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::crm::UpdateLeadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateLead_, context, request, response);
}

void CRMService::Stub::async::UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateLead_, context, request, response, std::move(f));
}

void CRMService::Stub::async::UpdateLead(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>* CRMService::Stub::PrepareAsyncUpdateLeadRaw(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::UpdateLeadResponse, ::crm::UpdateLeadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateLeadResponse>* CRMService::Stub::AsyncUpdateLeadRaw(::grpc::ClientContext* context, const ::crm::UpdateLeadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::crm::PatchLeadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::PatchLeadRequest, ::crm::PatchLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchLead_, context, request, response);
}

void CRMService::Stub::async::PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::PatchLeadRequest, ::crm::PatchLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchLead_, context, request, response, std::move(f));
}

void CRMService::Stub::async::PatchLead(::grpc::ClientContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>* CRMService::Stub::PrepareAsyncPatchLeadRaw(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::PatchLeadResponse, ::crm::PatchLeadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::PatchLeadResponse>* CRMService::Stub::AsyncPatchLeadRaw(::grpc::ClientContext* context, const ::crm::PatchLeadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::crm::DeleteLeadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteLead_, context, request, response);
}

void CRMService::Stub::async::DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLead_, context, request, response, std::move(f));
}

void CRMService::Stub::async::DeleteLead(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>* CRMService::Stub::PrepareAsyncDeleteLeadRaw(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::DeleteLeadResponse, ::crm::DeleteLeadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteLeadResponse>* CRMService::Stub::AsyncDeleteLeadRaw(::grpc::ClientContext* context, const ::crm::DeleteLeadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::crm::CreateTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::CreateTaskRequest, ::crm::CreateTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTask_, context, request, response);
}

void CRMService::Stub::async::CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::CreateTaskRequest, ::crm::CreateTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, std::move(f));
}

void CRMService::Stub::async::CreateTask(::grpc::ClientContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>* CRMService::Stub::PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::CreateTaskResponse, ::crm::CreateTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateTaskResponse>* CRMService::Stub::AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::crm::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::crm::GetTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::GetTaskRequest, ::crm::GetTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void CRMService::Stub::async::GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::GetTaskRequest, ::crm::GetTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void CRMService::Stub::async::GetTask(::grpc::ClientContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>* CRMService::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::GetTaskResponse, ::crm::GetTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::GetTaskResponse>* CRMService::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::crm::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::crm::ListTasksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::ListTasksRequest, ::crm::ListTasksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTasks_, context, request, response);
}

void CRMService::Stub::async::ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::ListTasksRequest, ::crm::ListTasksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, std::move(f));
}

void CRMService::Stub::async::ListTasks(::grpc::ClientContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>* CRMService::Stub::PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::ListTasksResponse, ::crm::ListTasksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTasks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::ListTasksResponse>* CRMService::Stub::AsyncListTasksRaw(::grpc::ClientContext* context, const ::crm::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTasksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::crm::UpdateTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTask_, context, request, response);
}

void CRMService::Stub::async::UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTask_, context, request, response, std::move(f));
}

void CRMService::Stub::async::UpdateTask(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>* CRMService::Stub::PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::UpdateTaskResponse, ::crm::UpdateTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateTaskResponse>* CRMService::Stub::AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::crm::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::crm::DeleteTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTask_, context, request, response);
}

void CRMService::Stub::async::DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, std::move(f));
}

void CRMService::Stub::async::DeleteTask(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>* CRMService::Stub::PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::DeleteTaskResponse, ::crm::DeleteTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteTaskResponse>* CRMService::Stub::AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::crm::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::crm::CreateNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::CreateNoteRequest, ::crm::CreateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNote_, context, request, response);
}

void CRMService::Stub::async::CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::CreateNoteRequest, ::crm::CreateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNote_, context, request, response, std::move(f));
}

void CRMService::Stub::async::CreateNote(::grpc::ClientContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>* CRMService::Stub::PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::CreateNoteResponse, ::crm::CreateNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateNoteResponse>* CRMService::Stub::AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::crm::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::crm::GetNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::GetNoteRequest, ::crm::GetNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNote_, context, request, response);
}

void CRMService::Stub::async::GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::GetNoteRequest, ::crm::GetNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNote_, context, request, response, std::move(f));
}

void CRMService::Stub::async::GetNote(::grpc::ClientContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>* CRMService::Stub::PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::GetNoteResponse, ::crm::GetNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::GetNoteResponse>* CRMService::Stub::AsyncGetNoteRaw(::grpc::ClientContext* context, const ::crm::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::crm::ListNotesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::ListNotesRequest, ::crm::ListNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNotes_, context, request, response);
}

void CRMService::Stub::async::ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::ListNotesRequest, ::crm::ListNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNotes_, context, request, response, std::move(f));
}

void CRMService::Stub::async::ListNotes(::grpc::ClientContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNotes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>* CRMService::Stub::PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::ListNotesResponse, ::crm::ListNotesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNotes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::ListNotesResponse>* CRMService::Stub::AsyncListNotesRaw(::grpc::ClientContext* context, const ::crm::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNotesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::crm::UpdateNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNote_, context, request, response);
}

void CRMService::Stub::async::UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNote_, context, request, response, std::move(f));
}

void CRMService::Stub::async::UpdateNote(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>* CRMService::Stub::PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::UpdateNoteResponse, ::crm::UpdateNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateNoteResponse>* CRMService::Stub::AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::crm::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::crm::DeleteNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNote_, context, request, response);
}

void CRMService::Stub::async::DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNote_, context, request, response, std::move(f));
}

void CRMService::Stub::async::DeleteNote(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>* CRMService::Stub::PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::DeleteNoteResponse, ::crm::DeleteNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteNoteResponse>* CRMService::Stub::AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::crm::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::crm::CreateChatMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChatMessage_, context, request, response);
}

void CRMService::Stub::async::CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatMessage_, context, request, response, std::move(f));
}

void CRMService::Stub::async::CreateChatMessage(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>* CRMService::Stub::PrepareAsyncCreateChatMessageRaw(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::CreateChatMessageResponse, ::crm::CreateChatMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChatMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateChatMessageResponse>* CRMService::Stub::AsyncCreateChatMessageRaw(::grpc::ClientContext* context, const ::crm::CreateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChatMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::crm::GetChatMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChatMessage_, context, request, response);
}

void CRMService::Stub::async::GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatMessage_, context, request, response, std::move(f));
}

void CRMService::Stub::async::GetChatMessage(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>* CRMService::Stub::PrepareAsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::GetChatMessageResponse, ::crm::GetChatMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChatMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::GetChatMessageResponse>* CRMService::Stub::AsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::crm::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::crm::ListChatMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListChatMessages_, context, request, response);
}

void CRMService::Stub::async::ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListChatMessages_, context, request, response, std::move(f));
}

void CRMService::Stub::async::ListChatMessages(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListChatMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>* CRMService::Stub::PrepareAsyncListChatMessagesRaw(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::ListChatMessagesResponse, ::crm::ListChatMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListChatMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::ListChatMessagesResponse>* CRMService::Stub::AsyncListChatMessagesRaw(::grpc::ClientContext* context, const ::crm::ListChatMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListChatMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::crm::UpdateChatMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateChatMessage_, context, request, response);
}

void CRMService::Stub::async::UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateChatMessage_, context, request, response, std::move(f));
}

void CRMService::Stub::async::UpdateChatMessage(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateChatMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>* CRMService::Stub::PrepareAsyncUpdateChatMessageRaw(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::UpdateChatMessageResponse, ::crm::UpdateChatMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateChatMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::UpdateChatMessageResponse>* CRMService::Stub::AsyncUpdateChatMessageRaw(::grpc::ClientContext* context, const ::crm::UpdateChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateChatMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CRMService::Stub::DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::crm::DeleteChatMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteChatMessage_, context, request, response);
}

void CRMService::Stub::async::DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChatMessage_, context, request, response, std::move(f));
}

void CRMService::Stub::async::DeleteChatMessage(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChatMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>* CRMService::Stub::PrepareAsyncDeleteChatMessageRaw(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::DeleteChatMessageResponse, ::crm::DeleteChatMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteChatMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::DeleteChatMessageResponse>* CRMService::Stub::AsyncDeleteChatMessageRaw(::grpc::ClientContext* context, const ::crm::DeleteChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteChatMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

CRMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::CreateLeadRequest, ::crm::CreateLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::CreateLeadRequest* req,
             ::crm::CreateLeadResponse* resp) {
               return service->CreateLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::GetLeadRequest, ::crm::GetLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::GetLeadRequest* req,
             ::crm::GetLeadResponse* resp) {
               return service->GetLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::ListLeadsRequest, ::crm::ListLeadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::ListLeadsRequest* req,
             ::crm::ListLeadsResponse* resp) {
               return service->ListLeads(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::UpdateLeadRequest, ::crm::UpdateLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::UpdateLeadRequest* req,
             ::crm::UpdateLeadResponse* resp) {
               return service->UpdateLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::PatchLeadRequest, ::crm::PatchLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::PatchLeadRequest* req,
             ::crm::PatchLeadResponse* resp) {
               return service->PatchLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::DeleteLeadRequest, ::crm::DeleteLeadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::DeleteLeadRequest* req,
             ::crm::DeleteLeadResponse* resp) {
               return service->DeleteLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::CreateTaskRequest, ::crm::CreateTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::CreateTaskRequest* req,
             ::crm::CreateTaskResponse* resp) {
               return service->CreateTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::GetTaskRequest, ::crm::GetTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::GetTaskRequest* req,
             ::crm::GetTaskResponse* resp) {
               return service->GetTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::ListTasksRequest, ::crm::ListTasksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::ListTasksRequest* req,
             ::crm::ListTasksResponse* resp) {
               return service->ListTasks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::UpdateTaskRequest, ::crm::UpdateTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::UpdateTaskRequest* req,
             ::crm::UpdateTaskResponse* resp) {
               return service->UpdateTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::DeleteTaskRequest, ::crm::DeleteTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::DeleteTaskRequest* req,
             ::crm::DeleteTaskResponse* resp) {
               return service->DeleteTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::CreateNoteRequest, ::crm::CreateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::CreateNoteRequest* req,
             ::crm::CreateNoteResponse* resp) {
               return service->CreateNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::GetNoteRequest, ::crm::GetNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::GetNoteRequest* req,
             ::crm::GetNoteResponse* resp) {
               return service->GetNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::ListNotesRequest, ::crm::ListNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::ListNotesRequest* req,
             ::crm::ListNotesResponse* resp) {
               return service->ListNotes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::UpdateNoteRequest, ::crm::UpdateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::UpdateNoteRequest* req,
             ::crm::UpdateNoteResponse* resp) {
               return service->UpdateNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::DeleteNoteRequest, ::crm::DeleteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::DeleteNoteRequest* req,
             ::crm::DeleteNoteResponse* resp) {
               return service->DeleteNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::CreateChatMessageRequest, ::crm::CreateChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::CreateChatMessageRequest* req,
             ::crm::CreateChatMessageResponse* resp) {
               return service->CreateChatMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::GetChatMessageRequest, ::crm::GetChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::GetChatMessageRequest* req,
             ::crm::GetChatMessageResponse* resp) {
               return service->GetChatMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::ListChatMessagesRequest, ::crm::ListChatMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::ListChatMessagesRequest* req,
             ::crm::ListChatMessagesResponse* resp) {
               return service->ListChatMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::UpdateChatMessageRequest, ::crm::UpdateChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::UpdateChatMessageRequest* req,
             ::crm::UpdateChatMessageResponse* resp) {
               return service->UpdateChatMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CRMService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CRMService::Service, ::crm::DeleteChatMessageRequest, ::crm::DeleteChatMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CRMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::DeleteChatMessageRequest* req,
             ::crm::DeleteChatMessageResponse* resp) {
               return service->DeleteChatMessage(ctx, req, resp);
             }, this)));
}

CRMService::Service::~Service() {
}

::grpc::Status CRMService::Service::CreateLead(::grpc::ServerContext* context, const ::crm::CreateLeadRequest* request, ::crm::CreateLeadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::GetLead(::grpc::ServerContext* context, const ::crm::GetLeadRequest* request, ::crm::GetLeadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::ListLeads(::grpc::ServerContext* context, const ::crm::ListLeadsRequest* request, ::crm::ListLeadsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::UpdateLead(::grpc::ServerContext* context, const ::crm::UpdateLeadRequest* request, ::crm::UpdateLeadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::PatchLead(::grpc::ServerContext* context, const ::crm::PatchLeadRequest* request, ::crm::PatchLeadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::DeleteLead(::grpc::ServerContext* context, const ::crm::DeleteLeadRequest* request, ::crm::DeleteLeadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::CreateTask(::grpc::ServerContext* context, const ::crm::CreateTaskRequest* request, ::crm::CreateTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::GetTask(::grpc::ServerContext* context, const ::crm::GetTaskRequest* request, ::crm::GetTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::ListTasks(::grpc::ServerContext* context, const ::crm::ListTasksRequest* request, ::crm::ListTasksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::UpdateTask(::grpc::ServerContext* context, const ::crm::UpdateTaskRequest* request, ::crm::UpdateTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::DeleteTask(::grpc::ServerContext* context, const ::crm::DeleteTaskRequest* request, ::crm::DeleteTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::CreateNote(::grpc::ServerContext* context, const ::crm::CreateNoteRequest* request, ::crm::CreateNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::GetNote(::grpc::ServerContext* context, const ::crm::GetNoteRequest* request, ::crm::GetNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::ListNotes(::grpc::ServerContext* context, const ::crm::ListNotesRequest* request, ::crm::ListNotesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::UpdateNote(::grpc::ServerContext* context, const ::crm::UpdateNoteRequest* request, ::crm::UpdateNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::DeleteNote(::grpc::ServerContext* context, const ::crm::DeleteNoteRequest* request, ::crm::DeleteNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::CreateChatMessage(::grpc::ServerContext* context, const ::crm::CreateChatMessageRequest* request, ::crm::CreateChatMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::GetChatMessage(::grpc::ServerContext* context, const ::crm::GetChatMessageRequest* request, ::crm::GetChatMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::ListChatMessages(::grpc::ServerContext* context, const ::crm::ListChatMessagesRequest* request, ::crm::ListChatMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::UpdateChatMessage(::grpc::ServerContext* context, const ::crm::UpdateChatMessageRequest* request, ::crm::UpdateChatMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CRMService::Service::DeleteChatMessage(::grpc::ServerContext* context, const ::crm::DeleteChatMessageRequest* request, ::crm::DeleteChatMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace crm


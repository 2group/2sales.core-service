// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: product/product.proto

#include "product/product.pb.h"
#include "product/product.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace product {

static const char* ProductService_method_names[] = {
  "/product.ProductService/CreateProduct",
  "/product.ProductService/ListProducts",
  "/product.ProductService/DuplicateProduct",
  "/product.ProductService/UploadProducts",
  "/product.ProductService/PatchProduct",
  "/product.ProductService/GetProduct",
  "/product.ProductService/DeleteProduct",
  "/product.ProductService/CreateProductCategory",
  "/product.ProductService/GetProductCategoryWithChildren",
  "/product.ProductService/ListCategories",
  "/product.ProductService/GetChildrenCategories",
  "/product.ProductService/ListProductGroups",
  "/product.ProductService/CreateProductGroup",
  "/product.ProductService/GetProductGroup",
  "/product.ProductService/UpdateProductGroup",
  "/product.ProductService/DeleteProductGroup",
  "/product.ProductService/GeneratePresignedURLs",
};

std::unique_ptr< ProductService::Stub> ProductService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProductService::Stub> stub(new ProductService::Stub(channel, options));
  return stub;
}

ProductService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateProduct_(ProductService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProducts_(ProductService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DuplicateProduct_(ProductService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadProducts_(ProductService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchProduct_(ProductService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProduct_(ProductService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProduct_(ProductService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProductCategory_(ProductService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProductCategoryWithChildren_(ProductService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCategories_(ProductService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChildrenCategories_(ProductService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProductGroups_(ProductService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProductGroup_(ProductService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProductGroup_(ProductService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProductGroup_(ProductService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProductGroup_(ProductService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GeneratePresignedURLs_(ProductService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProductService::Stub::CreateProduct(::grpc::ClientContext* context, const ::product::CreateProductRequest& request, ::product::CreateProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::CreateProductRequest, ::product::CreateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProduct_, context, request, response);
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::product::CreateProductRequest* request, ::product::CreateProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::CreateProductRequest, ::product::CreateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::product::CreateProductRequest* request, ::product::CreateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::CreateProductResponse>* ProductService::Stub::PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::product::CreateProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::CreateProductResponse, ::product::CreateProductRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::CreateProductResponse>* ProductService::Stub::AsyncCreateProductRaw(::grpc::ClientContext* context, const ::product::CreateProductRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::ListProducts(::grpc::ClientContext* context, const ::product::ListProductsRequest& request, ::product::ListProductsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::ListProductsRequest, ::product::ListProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProducts_, context, request, response);
}

void ProductService::Stub::async::ListProducts(::grpc::ClientContext* context, const ::product::ListProductsRequest* request, ::product::ListProductsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::ListProductsRequest, ::product::ListProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProducts_, context, request, response, std::move(f));
}

void ProductService::Stub::async::ListProducts(::grpc::ClientContext* context, const ::product::ListProductsRequest* request, ::product::ListProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProducts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::ListProductsResponse>* ProductService::Stub::PrepareAsyncListProductsRaw(::grpc::ClientContext* context, const ::product::ListProductsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::ListProductsResponse, ::product::ListProductsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProducts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::ListProductsResponse>* ProductService::Stub::AsyncListProductsRaw(::grpc::ClientContext* context, const ::product::ListProductsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListProductsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::DuplicateProduct(::grpc::ClientContext* context, const ::product::DuplicateProductRequest& request, ::product::DuplicateProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::DuplicateProductRequest, ::product::DuplicateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DuplicateProduct_, context, request, response);
}

void ProductService::Stub::async::DuplicateProduct(::grpc::ClientContext* context, const ::product::DuplicateProductRequest* request, ::product::DuplicateProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::DuplicateProductRequest, ::product::DuplicateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DuplicateProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::DuplicateProduct(::grpc::ClientContext* context, const ::product::DuplicateProductRequest* request, ::product::DuplicateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DuplicateProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::DuplicateProductResponse>* ProductService::Stub::PrepareAsyncDuplicateProductRaw(::grpc::ClientContext* context, const ::product::DuplicateProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::DuplicateProductResponse, ::product::DuplicateProductRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DuplicateProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::DuplicateProductResponse>* ProductService::Stub::AsyncDuplicateProductRaw(::grpc::ClientContext* context, const ::product::DuplicateProductRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDuplicateProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::UploadProducts(::grpc::ClientContext* context, const ::product::UploadProductsRequest& request, ::product::UploadProductsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::UploadProductsRequest, ::product::UploadProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadProducts_, context, request, response);
}

void ProductService::Stub::async::UploadProducts(::grpc::ClientContext* context, const ::product::UploadProductsRequest* request, ::product::UploadProductsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::UploadProductsRequest, ::product::UploadProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadProducts_, context, request, response, std::move(f));
}

void ProductService::Stub::async::UploadProducts(::grpc::ClientContext* context, const ::product::UploadProductsRequest* request, ::product::UploadProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadProducts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::UploadProductsResponse>* ProductService::Stub::PrepareAsyncUploadProductsRaw(::grpc::ClientContext* context, const ::product::UploadProductsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::UploadProductsResponse, ::product::UploadProductsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadProducts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::UploadProductsResponse>* ProductService::Stub::AsyncUploadProductsRaw(::grpc::ClientContext* context, const ::product::UploadProductsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadProductsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::PatchProduct(::grpc::ClientContext* context, const ::product::PatchProductRequest& request, ::product::PatchProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::PatchProductRequest, ::product::PatchProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchProduct_, context, request, response);
}

void ProductService::Stub::async::PatchProduct(::grpc::ClientContext* context, const ::product::PatchProductRequest* request, ::product::PatchProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::PatchProductRequest, ::product::PatchProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::PatchProduct(::grpc::ClientContext* context, const ::product::PatchProductRequest* request, ::product::PatchProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::PatchProductResponse>* ProductService::Stub::PrepareAsyncPatchProductRaw(::grpc::ClientContext* context, const ::product::PatchProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::PatchProductResponse, ::product::PatchProductRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::PatchProductResponse>* ProductService::Stub::AsyncPatchProductRaw(::grpc::ClientContext* context, const ::product::PatchProductRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::GetProduct(::grpc::ClientContext* context, const ::product::GetProductRequest& request, ::product::GetProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::GetProductRequest, ::product::GetProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProduct_, context, request, response);
}

void ProductService::Stub::async::GetProduct(::grpc::ClientContext* context, const ::product::GetProductRequest* request, ::product::GetProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::GetProductRequest, ::product::GetProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::GetProduct(::grpc::ClientContext* context, const ::product::GetProductRequest* request, ::product::GetProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::GetProductResponse>* ProductService::Stub::PrepareAsyncGetProductRaw(::grpc::ClientContext* context, const ::product::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::GetProductResponse, ::product::GetProductRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::GetProductResponse>* ProductService::Stub::AsyncGetProductRaw(::grpc::ClientContext* context, const ::product::GetProductRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::DeleteProduct(::grpc::ClientContext* context, const ::product::DeleteProductRequest& request, ::product::DeleteProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::DeleteProductRequest, ::product::DeleteProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteProduct_, context, request, response);
}

void ProductService::Stub::async::DeleteProduct(::grpc::ClientContext* context, const ::product::DeleteProductRequest* request, ::product::DeleteProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::DeleteProductRequest, ::product::DeleteProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::DeleteProduct(::grpc::ClientContext* context, const ::product::DeleteProductRequest* request, ::product::DeleteProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::DeleteProductResponse>* ProductService::Stub::PrepareAsyncDeleteProductRaw(::grpc::ClientContext* context, const ::product::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::DeleteProductResponse, ::product::DeleteProductRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::DeleteProductResponse>* ProductService::Stub::AsyncDeleteProductRaw(::grpc::ClientContext* context, const ::product::DeleteProductRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::CreateProductCategory(::grpc::ClientContext* context, const ::product::CreateProductCategoryRequest& request, ::product::CreateProductCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::CreateProductCategoryRequest, ::product::CreateProductCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProductCategory_, context, request, response);
}

void ProductService::Stub::async::CreateProductCategory(::grpc::ClientContext* context, const ::product::CreateProductCategoryRequest* request, ::product::CreateProductCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::CreateProductCategoryRequest, ::product::CreateProductCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProductCategory_, context, request, response, std::move(f));
}

void ProductService::Stub::async::CreateProductCategory(::grpc::ClientContext* context, const ::product::CreateProductCategoryRequest* request, ::product::CreateProductCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProductCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::CreateProductCategoryResponse>* ProductService::Stub::PrepareAsyncCreateProductCategoryRaw(::grpc::ClientContext* context, const ::product::CreateProductCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::CreateProductCategoryResponse, ::product::CreateProductCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProductCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::CreateProductCategoryResponse>* ProductService::Stub::AsyncCreateProductCategoryRaw(::grpc::ClientContext* context, const ::product::CreateProductCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProductCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::GetProductCategoryWithChildren(::grpc::ClientContext* context, const ::product::GetProductCategoryWithChildrenRequest& request, ::product::GetProductCategoryWithChildrenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::GetProductCategoryWithChildrenRequest, ::product::GetProductCategoryWithChildrenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProductCategoryWithChildren_, context, request, response);
}

void ProductService::Stub::async::GetProductCategoryWithChildren(::grpc::ClientContext* context, const ::product::GetProductCategoryWithChildrenRequest* request, ::product::GetProductCategoryWithChildrenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::GetProductCategoryWithChildrenRequest, ::product::GetProductCategoryWithChildrenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProductCategoryWithChildren_, context, request, response, std::move(f));
}

void ProductService::Stub::async::GetProductCategoryWithChildren(::grpc::ClientContext* context, const ::product::GetProductCategoryWithChildrenRequest* request, ::product::GetProductCategoryWithChildrenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProductCategoryWithChildren_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::GetProductCategoryWithChildrenResponse>* ProductService::Stub::PrepareAsyncGetProductCategoryWithChildrenRaw(::grpc::ClientContext* context, const ::product::GetProductCategoryWithChildrenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::GetProductCategoryWithChildrenResponse, ::product::GetProductCategoryWithChildrenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProductCategoryWithChildren_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::GetProductCategoryWithChildrenResponse>* ProductService::Stub::AsyncGetProductCategoryWithChildrenRaw(::grpc::ClientContext* context, const ::product::GetProductCategoryWithChildrenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProductCategoryWithChildrenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::ListCategories(::grpc::ClientContext* context, const ::product::ListCategoriesRequest& request, ::product::ListCategoriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::ListCategoriesRequest, ::product::ListCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCategories_, context, request, response);
}

void ProductService::Stub::async::ListCategories(::grpc::ClientContext* context, const ::product::ListCategoriesRequest* request, ::product::ListCategoriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::ListCategoriesRequest, ::product::ListCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCategories_, context, request, response, std::move(f));
}

void ProductService::Stub::async::ListCategories(::grpc::ClientContext* context, const ::product::ListCategoriesRequest* request, ::product::ListCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCategories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::ListCategoriesResponse>* ProductService::Stub::PrepareAsyncListCategoriesRaw(::grpc::ClientContext* context, const ::product::ListCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::ListCategoriesResponse, ::product::ListCategoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCategories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::ListCategoriesResponse>* ProductService::Stub::AsyncListCategoriesRaw(::grpc::ClientContext* context, const ::product::ListCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCategoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::GetChildrenCategories(::grpc::ClientContext* context, const ::product::GetChildrenCategoriesRequest& request, ::product::GetChildrenCategoriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::GetChildrenCategoriesRequest, ::product::GetChildrenCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChildrenCategories_, context, request, response);
}

void ProductService::Stub::async::GetChildrenCategories(::grpc::ClientContext* context, const ::product::GetChildrenCategoriesRequest* request, ::product::GetChildrenCategoriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::GetChildrenCategoriesRequest, ::product::GetChildrenCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildrenCategories_, context, request, response, std::move(f));
}

void ProductService::Stub::async::GetChildrenCategories(::grpc::ClientContext* context, const ::product::GetChildrenCategoriesRequest* request, ::product::GetChildrenCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildrenCategories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::GetChildrenCategoriesResponse>* ProductService::Stub::PrepareAsyncGetChildrenCategoriesRaw(::grpc::ClientContext* context, const ::product::GetChildrenCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::GetChildrenCategoriesResponse, ::product::GetChildrenCategoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChildrenCategories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::GetChildrenCategoriesResponse>* ProductService::Stub::AsyncGetChildrenCategoriesRaw(::grpc::ClientContext* context, const ::product::GetChildrenCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChildrenCategoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::ListProductGroups(::grpc::ClientContext* context, const ::product::ListProductGroupsRequest& request, ::product::ListProductGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::ListProductGroupsRequest, ::product::ListProductGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProductGroups_, context, request, response);
}

void ProductService::Stub::async::ListProductGroups(::grpc::ClientContext* context, const ::product::ListProductGroupsRequest* request, ::product::ListProductGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::ListProductGroupsRequest, ::product::ListProductGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProductGroups_, context, request, response, std::move(f));
}

void ProductService::Stub::async::ListProductGroups(::grpc::ClientContext* context, const ::product::ListProductGroupsRequest* request, ::product::ListProductGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProductGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::ListProductGroupsResponse>* ProductService::Stub::PrepareAsyncListProductGroupsRaw(::grpc::ClientContext* context, const ::product::ListProductGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::ListProductGroupsResponse, ::product::ListProductGroupsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProductGroups_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::ListProductGroupsResponse>* ProductService::Stub::AsyncListProductGroupsRaw(::grpc::ClientContext* context, const ::product::ListProductGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListProductGroupsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::CreateProductGroup(::grpc::ClientContext* context, const ::product::CreateProductGroupRequest& request, ::product::CreateProductGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::CreateProductGroupRequest, ::product::CreateProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProductGroup_, context, request, response);
}

void ProductService::Stub::async::CreateProductGroup(::grpc::ClientContext* context, const ::product::CreateProductGroupRequest* request, ::product::CreateProductGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::CreateProductGroupRequest, ::product::CreateProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProductGroup_, context, request, response, std::move(f));
}

void ProductService::Stub::async::CreateProductGroup(::grpc::ClientContext* context, const ::product::CreateProductGroupRequest* request, ::product::CreateProductGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProductGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::CreateProductGroupResponse>* ProductService::Stub::PrepareAsyncCreateProductGroupRaw(::grpc::ClientContext* context, const ::product::CreateProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::CreateProductGroupResponse, ::product::CreateProductGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProductGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::CreateProductGroupResponse>* ProductService::Stub::AsyncCreateProductGroupRaw(::grpc::ClientContext* context, const ::product::CreateProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProductGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::GetProductGroup(::grpc::ClientContext* context, const ::product::GetProductGroupRequest& request, ::product::GetProductGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::GetProductGroupRequest, ::product::GetProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProductGroup_, context, request, response);
}

void ProductService::Stub::async::GetProductGroup(::grpc::ClientContext* context, const ::product::GetProductGroupRequest* request, ::product::GetProductGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::GetProductGroupRequest, ::product::GetProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProductGroup_, context, request, response, std::move(f));
}

void ProductService::Stub::async::GetProductGroup(::grpc::ClientContext* context, const ::product::GetProductGroupRequest* request, ::product::GetProductGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProductGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::GetProductGroupResponse>* ProductService::Stub::PrepareAsyncGetProductGroupRaw(::grpc::ClientContext* context, const ::product::GetProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::GetProductGroupResponse, ::product::GetProductGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProductGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::GetProductGroupResponse>* ProductService::Stub::AsyncGetProductGroupRaw(::grpc::ClientContext* context, const ::product::GetProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProductGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::UpdateProductGroup(::grpc::ClientContext* context, const ::product::UpdateProductGroupRequest& request, ::product::UpdateProductGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::UpdateProductGroupRequest, ::product::UpdateProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateProductGroup_, context, request, response);
}

void ProductService::Stub::async::UpdateProductGroup(::grpc::ClientContext* context, const ::product::UpdateProductGroupRequest* request, ::product::UpdateProductGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::UpdateProductGroupRequest, ::product::UpdateProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProductGroup_, context, request, response, std::move(f));
}

void ProductService::Stub::async::UpdateProductGroup(::grpc::ClientContext* context, const ::product::UpdateProductGroupRequest* request, ::product::UpdateProductGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProductGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::UpdateProductGroupResponse>* ProductService::Stub::PrepareAsyncUpdateProductGroupRaw(::grpc::ClientContext* context, const ::product::UpdateProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::UpdateProductGroupResponse, ::product::UpdateProductGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateProductGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::UpdateProductGroupResponse>* ProductService::Stub::AsyncUpdateProductGroupRaw(::grpc::ClientContext* context, const ::product::UpdateProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateProductGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::DeleteProductGroup(::grpc::ClientContext* context, const ::product::DeleteProductGroupRequest& request, ::product::DeleteProductGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::DeleteProductGroupRequest, ::product::DeleteProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteProductGroup_, context, request, response);
}

void ProductService::Stub::async::DeleteProductGroup(::grpc::ClientContext* context, const ::product::DeleteProductGroupRequest* request, ::product::DeleteProductGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::DeleteProductGroupRequest, ::product::DeleteProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProductGroup_, context, request, response, std::move(f));
}

void ProductService::Stub::async::DeleteProductGroup(::grpc::ClientContext* context, const ::product::DeleteProductGroupRequest* request, ::product::DeleteProductGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProductGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::DeleteProductGroupResponse>* ProductService::Stub::PrepareAsyncDeleteProductGroupRaw(::grpc::ClientContext* context, const ::product::DeleteProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::DeleteProductGroupResponse, ::product::DeleteProductGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteProductGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::DeleteProductGroupResponse>* ProductService::Stub::AsyncDeleteProductGroupRaw(::grpc::ClientContext* context, const ::product::DeleteProductGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteProductGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::GeneratePresignedURLs(::grpc::ClientContext* context, const ::product::GeneratePresignedURLsRequest& request, ::product::GeneratePresignedURLsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::product::GeneratePresignedURLsRequest, ::product::GeneratePresignedURLsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GeneratePresignedURLs_, context, request, response);
}

void ProductService::Stub::async::GeneratePresignedURLs(::grpc::ClientContext* context, const ::product::GeneratePresignedURLsRequest* request, ::product::GeneratePresignedURLsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::product::GeneratePresignedURLsRequest, ::product::GeneratePresignedURLsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePresignedURLs_, context, request, response, std::move(f));
}

void ProductService::Stub::async::GeneratePresignedURLs(::grpc::ClientContext* context, const ::product::GeneratePresignedURLsRequest* request, ::product::GeneratePresignedURLsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePresignedURLs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::product::GeneratePresignedURLsResponse>* ProductService::Stub::PrepareAsyncGeneratePresignedURLsRaw(::grpc::ClientContext* context, const ::product::GeneratePresignedURLsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::product::GeneratePresignedURLsResponse, ::product::GeneratePresignedURLsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GeneratePresignedURLs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::product::GeneratePresignedURLsResponse>* ProductService::Stub::AsyncGeneratePresignedURLsRaw(::grpc::ClientContext* context, const ::product::GeneratePresignedURLsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGeneratePresignedURLsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProductService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::CreateProductRequest, ::product::CreateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::CreateProductRequest* req,
             ::product::CreateProductResponse* resp) {
               return service->CreateProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::ListProductsRequest, ::product::ListProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::ListProductsRequest* req,
             ::product::ListProductsResponse* resp) {
               return service->ListProducts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::DuplicateProductRequest, ::product::DuplicateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::DuplicateProductRequest* req,
             ::product::DuplicateProductResponse* resp) {
               return service->DuplicateProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::UploadProductsRequest, ::product::UploadProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::UploadProductsRequest* req,
             ::product::UploadProductsResponse* resp) {
               return service->UploadProducts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::PatchProductRequest, ::product::PatchProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::PatchProductRequest* req,
             ::product::PatchProductResponse* resp) {
               return service->PatchProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::GetProductRequest, ::product::GetProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::GetProductRequest* req,
             ::product::GetProductResponse* resp) {
               return service->GetProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::DeleteProductRequest, ::product::DeleteProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::DeleteProductRequest* req,
             ::product::DeleteProductResponse* resp) {
               return service->DeleteProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::CreateProductCategoryRequest, ::product::CreateProductCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::CreateProductCategoryRequest* req,
             ::product::CreateProductCategoryResponse* resp) {
               return service->CreateProductCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::GetProductCategoryWithChildrenRequest, ::product::GetProductCategoryWithChildrenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::GetProductCategoryWithChildrenRequest* req,
             ::product::GetProductCategoryWithChildrenResponse* resp) {
               return service->GetProductCategoryWithChildren(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::ListCategoriesRequest, ::product::ListCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::ListCategoriesRequest* req,
             ::product::ListCategoriesResponse* resp) {
               return service->ListCategories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::GetChildrenCategoriesRequest, ::product::GetChildrenCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::GetChildrenCategoriesRequest* req,
             ::product::GetChildrenCategoriesResponse* resp) {
               return service->GetChildrenCategories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::ListProductGroupsRequest, ::product::ListProductGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::ListProductGroupsRequest* req,
             ::product::ListProductGroupsResponse* resp) {
               return service->ListProductGroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::CreateProductGroupRequest, ::product::CreateProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::CreateProductGroupRequest* req,
             ::product::CreateProductGroupResponse* resp) {
               return service->CreateProductGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::GetProductGroupRequest, ::product::GetProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::GetProductGroupRequest* req,
             ::product::GetProductGroupResponse* resp) {
               return service->GetProductGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::UpdateProductGroupRequest, ::product::UpdateProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::UpdateProductGroupRequest* req,
             ::product::UpdateProductGroupResponse* resp) {
               return service->UpdateProductGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::DeleteProductGroupRequest, ::product::DeleteProductGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::DeleteProductGroupRequest* req,
             ::product::DeleteProductGroupResponse* resp) {
               return service->DeleteProductGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::product::GeneratePresignedURLsRequest, ::product::GeneratePresignedURLsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::product::GeneratePresignedURLsRequest* req,
             ::product::GeneratePresignedURLsResponse* resp) {
               return service->GeneratePresignedURLs(ctx, req, resp);
             }, this)));
}

ProductService::Service::~Service() {
}

::grpc::Status ProductService::Service::CreateProduct(::grpc::ServerContext* context, const ::product::CreateProductRequest* request, ::product::CreateProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::ListProducts(::grpc::ServerContext* context, const ::product::ListProductsRequest* request, ::product::ListProductsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::DuplicateProduct(::grpc::ServerContext* context, const ::product::DuplicateProductRequest* request, ::product::DuplicateProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::UploadProducts(::grpc::ServerContext* context, const ::product::UploadProductsRequest* request, ::product::UploadProductsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::PatchProduct(::grpc::ServerContext* context, const ::product::PatchProductRequest* request, ::product::PatchProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::GetProduct(::grpc::ServerContext* context, const ::product::GetProductRequest* request, ::product::GetProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::DeleteProduct(::grpc::ServerContext* context, const ::product::DeleteProductRequest* request, ::product::DeleteProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::CreateProductCategory(::grpc::ServerContext* context, const ::product::CreateProductCategoryRequest* request, ::product::CreateProductCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::GetProductCategoryWithChildren(::grpc::ServerContext* context, const ::product::GetProductCategoryWithChildrenRequest* request, ::product::GetProductCategoryWithChildrenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::ListCategories(::grpc::ServerContext* context, const ::product::ListCategoriesRequest* request, ::product::ListCategoriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::GetChildrenCategories(::grpc::ServerContext* context, const ::product::GetChildrenCategoriesRequest* request, ::product::GetChildrenCategoriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::ListProductGroups(::grpc::ServerContext* context, const ::product::ListProductGroupsRequest* request, ::product::ListProductGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::CreateProductGroup(::grpc::ServerContext* context, const ::product::CreateProductGroupRequest* request, ::product::CreateProductGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::GetProductGroup(::grpc::ServerContext* context, const ::product::GetProductGroupRequest* request, ::product::GetProductGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::UpdateProductGroup(::grpc::ServerContext* context, const ::product::UpdateProductGroupRequest* request, ::product::UpdateProductGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::DeleteProductGroup(::grpc::ServerContext* context, const ::product::DeleteProductGroupRequest* request, ::product::DeleteProductGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::GeneratePresignedURLs(::grpc::ServerContext* context, const ::product::GeneratePresignedURLsRequest* request, ::product::GeneratePresignedURLsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace product


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: advertisement/advertisement.proto

#include "advertisement/advertisement.pb.h"
#include "advertisement/advertisement.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace crm {

static const char* AdvertisementService_method_names[] = {
  "/crm.AdvertisementService/CreateBanner",
  "/crm.AdvertisementService/ListBanners",
};

std::unique_ptr< AdvertisementService::Stub> AdvertisementService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdvertisementService::Stub> stub(new AdvertisementService::Stub(channel, options));
  return stub;
}

AdvertisementService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateBanner_(AdvertisementService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBanners_(AdvertisementService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdvertisementService::Stub::CreateBanner(::grpc::ClientContext* context, const ::crm::CreateBannerRequest& request, ::crm::CreateBannerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::CreateBannerRequest, ::crm::CreateBannerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBanner_, context, request, response);
}

void AdvertisementService::Stub::async::CreateBanner(::grpc::ClientContext* context, const ::crm::CreateBannerRequest* request, ::crm::CreateBannerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::CreateBannerRequest, ::crm::CreateBannerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBanner_, context, request, response, std::move(f));
}

void AdvertisementService::Stub::async::CreateBanner(::grpc::ClientContext* context, const ::crm::CreateBannerRequest* request, ::crm::CreateBannerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBanner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateBannerResponse>* AdvertisementService::Stub::PrepareAsyncCreateBannerRaw(::grpc::ClientContext* context, const ::crm::CreateBannerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::CreateBannerResponse, ::crm::CreateBannerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBanner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::CreateBannerResponse>* AdvertisementService::Stub::AsyncCreateBannerRaw(::grpc::ClientContext* context, const ::crm::CreateBannerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBannerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdvertisementService::Stub::ListBanners(::grpc::ClientContext* context, const ::crm::ListBannersRequest& request, ::crm::ListBannersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::crm::ListBannersRequest, ::crm::ListBannersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBanners_, context, request, response);
}

void AdvertisementService::Stub::async::ListBanners(::grpc::ClientContext* context, const ::crm::ListBannersRequest* request, ::crm::ListBannersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::crm::ListBannersRequest, ::crm::ListBannersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBanners_, context, request, response, std::move(f));
}

void AdvertisementService::Stub::async::ListBanners(::grpc::ClientContext* context, const ::crm::ListBannersRequest* request, ::crm::ListBannersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBanners_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crm::ListBannersResponse>* AdvertisementService::Stub::PrepareAsyncListBannersRaw(::grpc::ClientContext* context, const ::crm::ListBannersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::crm::ListBannersResponse, ::crm::ListBannersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBanners_, context, request);
}

::grpc::ClientAsyncResponseReader< ::crm::ListBannersResponse>* AdvertisementService::Stub::AsyncListBannersRaw(::grpc::ClientContext* context, const ::crm::ListBannersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBannersRaw(context, request, cq);
  result->StartCall();
  return result;
}

AdvertisementService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdvertisementService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdvertisementService::Service, ::crm::CreateBannerRequest, ::crm::CreateBannerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdvertisementService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::CreateBannerRequest* req,
             ::crm::CreateBannerResponse* resp) {
               return service->CreateBanner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdvertisementService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdvertisementService::Service, ::crm::ListBannersRequest, ::crm::ListBannersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdvertisementService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::crm::ListBannersRequest* req,
             ::crm::ListBannersResponse* resp) {
               return service->ListBanners(ctx, req, resp);
             }, this)));
}

AdvertisementService::Service::~Service() {
}

::grpc::Status AdvertisementService::Service::CreateBanner(::grpc::ServerContext* context, const ::crm::CreateBannerRequest* request, ::crm::CreateBannerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdvertisementService::Service::ListBanners(::grpc::ServerContext* context, const ::crm::ListBannersRequest* request, ::crm::ListBannersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace crm


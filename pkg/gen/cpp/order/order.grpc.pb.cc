// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order/order.proto

#include "order/order.pb.h"
#include "order/order.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace order {

static const char* OrderService_method_names[] = {
  "/order.OrderService/ListCart",
  "/order.OrderService/AddProductToCart",
  "/order.OrderService/DeleteProductFromCart",
  "/order.OrderService/GetCountOfProductInCart",
  "/order.OrderService/CreateOrder",
  "/order.OrderService/CreateSubOrder",
  "/order.OrderService/GetSubOrder",
  "/order.OrderService/UpdateSubOrder",
  "/order.OrderService/ListSubOrder",
};

std::unique_ptr< OrderService::Stub> OrderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderService::Stub> stub(new OrderService::Stub(channel, options));
  return stub;
}

OrderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListCart_(OrderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddProductToCart_(OrderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProductFromCart_(OrderService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCountOfProductInCart_(OrderService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateOrder_(OrderService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSubOrder_(OrderService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubOrder_(OrderService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSubOrder_(OrderService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSubOrder_(OrderService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrderService::Stub::ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::order::ListCartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::ListCartRequest, ::order::ListCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCart_, context, request, response);
}

void OrderService::Stub::async::ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::ListCartRequest, ::order::ListCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCart_, context, request, response, std::move(f));
}

void OrderService::Stub::async::ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>* OrderService::Stub::PrepareAsyncListCartRaw(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::ListCartResponse, ::order::ListCartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>* OrderService::Stub::AsyncListCartRaw(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::order::AddProductToCartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::AddProductToCartRequest, ::order::AddProductToCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddProductToCart_, context, request, response);
}

void OrderService::Stub::async::AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::AddProductToCartRequest, ::order::AddProductToCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddProductToCart_, context, request, response, std::move(f));
}

void OrderService::Stub::async::AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddProductToCart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>* OrderService::Stub::PrepareAsyncAddProductToCartRaw(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::AddProductToCartResponse, ::order::AddProductToCartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddProductToCart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>* OrderService::Stub::AsyncAddProductToCartRaw(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddProductToCartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::order::DeleteProductFromCartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteProductFromCart_, context, request, response);
}

void OrderService::Stub::async::DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProductFromCart_, context, request, response, std::move(f));
}

void OrderService::Stub::async::DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProductFromCart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>* OrderService::Stub::PrepareAsyncDeleteProductFromCartRaw(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::DeleteProductFromCartResponse, ::order::DeleteProductFromCartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteProductFromCart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>* OrderService::Stub::AsyncDeleteProductFromCartRaw(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteProductFromCartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::order::GetCountOfProductInCartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCountOfProductInCart_, context, request, response);
}

void OrderService::Stub::async::GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCountOfProductInCart_, context, request, response, std::move(f));
}

void OrderService::Stub::async::GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCountOfProductInCart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>* OrderService::Stub::PrepareAsyncGetCountOfProductInCartRaw(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::GetCountOfProductInCartResponse, ::order::GetCountOfProductInCartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCountOfProductInCart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>* OrderService::Stub::AsyncGetCountOfProductInCartRaw(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCountOfProductInCartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::order::CreateOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::CreateOrderRequest, ::order::CreateOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateOrder_, context, request, response);
}

void OrderService::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::CreateOrderRequest, ::order::CreateOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>* OrderService::Stub::PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::CreateOrderResponse, ::order::CreateOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>* OrderService::Stub::AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::order::CreateSubOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSubOrder_, context, request, response);
}

void OrderService::Stub::async::CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSubOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSubOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>* OrderService::Stub::PrepareAsyncCreateSubOrderRaw(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::CreateSubOrderResponse, ::order::CreateSubOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSubOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>* OrderService::Stub::AsyncCreateSubOrderRaw(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSubOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::order::GetSubOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::GetSubOrderRequest, ::order::GetSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubOrder_, context, request, response);
}

void OrderService::Stub::async::GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::GetSubOrderRequest, ::order::GetSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>* OrderService::Stub::PrepareAsyncGetSubOrderRaw(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::GetSubOrderResponse, ::order::GetSubOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>* OrderService::Stub::AsyncGetSubOrderRaw(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::order::UpdateSubOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSubOrder_, context, request, response);
}

void OrderService::Stub::async::UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSubOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSubOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>* OrderService::Stub::PrepareAsyncUpdateSubOrderRaw(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::UpdateSubOrderResponse, ::order::UpdateSubOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSubOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>* OrderService::Stub::AsyncUpdateSubOrderRaw(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSubOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::order::ListSubOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::ListSubOrderRequest, ::order::ListSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSubOrder_, context, request, response);
}

void OrderService::Stub::async::ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::ListSubOrderRequest, ::order::ListSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSubOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSubOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>* OrderService::Stub::PrepareAsyncListSubOrderRaw(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::ListSubOrderResponse, ::order::ListSubOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSubOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>* OrderService::Stub::AsyncListSubOrderRaw(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSubOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::ListCartRequest, ::order::ListCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::ListCartRequest* req,
             ::order::ListCartResponse* resp) {
               return service->ListCart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::AddProductToCartRequest, ::order::AddProductToCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::AddProductToCartRequest* req,
             ::order::AddProductToCartResponse* resp) {
               return service->AddProductToCart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::DeleteProductFromCartRequest* req,
             ::order::DeleteProductFromCartResponse* resp) {
               return service->DeleteProductFromCart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::GetCountOfProductInCartRequest* req,
             ::order::GetCountOfProductInCartResponse* resp) {
               return service->GetCountOfProductInCart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::CreateOrderRequest, ::order::CreateOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::CreateOrderRequest* req,
             ::order::CreateOrderResponse* resp) {
               return service->CreateOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::CreateSubOrderRequest* req,
             ::order::CreateSubOrderResponse* resp) {
               return service->CreateSubOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::GetSubOrderRequest, ::order::GetSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::GetSubOrderRequest* req,
             ::order::GetSubOrderResponse* resp) {
               return service->GetSubOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::UpdateSubOrderRequest* req,
             ::order::UpdateSubOrderResponse* resp) {
               return service->UpdateSubOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::ListSubOrderRequest, ::order::ListSubOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::ListSubOrderRequest* req,
             ::order::ListSubOrderResponse* resp) {
               return service->ListSubOrder(ctx, req, resp);
             }, this)));
}

OrderService::Service::~Service() {
}

::grpc::Status OrderService::Service::ListCart(::grpc::ServerContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::AddProductToCart(::grpc::ServerContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::DeleteProductFromCart(::grpc::ServerContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::GetCountOfProductInCart(::grpc::ServerContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::CreateOrder(::grpc::ServerContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::CreateSubOrder(::grpc::ServerContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::GetSubOrder(::grpc::ServerContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::UpdateSubOrder(::grpc::ServerContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::ListSubOrder(::grpc::ServerContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace order


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order/order.proto
#ifndef GRPC_order_2forder_2eproto__INCLUDED
#define GRPC_order_2forder_2eproto__INCLUDED

#include "order/order.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace order {

class OrderService final {
 public:
  static constexpr char const* service_full_name() {
    return "order.OrderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::order::ListCartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListCartResponse>> AsyncListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListCartResponse>>(AsyncListCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListCartResponse>> PrepareAsyncListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListCartResponse>>(PrepareAsyncListCartRaw(context, request, cq));
    }
    virtual ::grpc::Status AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::order::AddProductToCartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::AddProductToCartResponse>> AsyncAddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::AddProductToCartResponse>>(AsyncAddProductToCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::AddProductToCartResponse>> PrepareAsyncAddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::AddProductToCartResponse>>(PrepareAsyncAddProductToCartRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::order::DeleteProductFromCartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::DeleteProductFromCartResponse>> AsyncDeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::DeleteProductFromCartResponse>>(AsyncDeleteProductFromCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::DeleteProductFromCartResponse>> PrepareAsyncDeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::DeleteProductFromCartResponse>>(PrepareAsyncDeleteProductFromCartRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::order::GetCountOfProductInCartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetCountOfProductInCartResponse>> AsyncGetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetCountOfProductInCartResponse>>(AsyncGetCountOfProductInCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetCountOfProductInCartResponse>> PrepareAsyncGetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetCountOfProductInCartResponse>>(PrepareAsyncGetCountOfProductInCartRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::order::CreateOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateOrderResponse>> AsyncCreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateOrderResponse>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateOrderResponse>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateOrderResponse>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::order::CreateSubOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateSubOrderResponse>> AsyncCreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateSubOrderResponse>>(AsyncCreateSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateSubOrderResponse>> PrepareAsyncCreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateSubOrderResponse>>(PrepareAsyncCreateSubOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::order::GetSubOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetSubOrderResponse>> AsyncGetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetSubOrderResponse>>(AsyncGetSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetSubOrderResponse>> PrepareAsyncGetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::GetSubOrderResponse>>(PrepareAsyncGetSubOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::order::UpdateSubOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::UpdateSubOrderResponse>> AsyncUpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::UpdateSubOrderResponse>>(AsyncUpdateSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::UpdateSubOrderResponse>> PrepareAsyncUpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::UpdateSubOrderResponse>>(PrepareAsyncUpdateSubOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::order::ListSubOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListSubOrderResponse>> AsyncListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListSubOrderResponse>>(AsyncListSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListSubOrderResponse>> PrepareAsyncListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order::ListSubOrderResponse>>(PrepareAsyncListSubOrderRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::ListCartResponse>* AsyncListCartRaw(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::ListCartResponse>* PrepareAsyncListCartRaw(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::AddProductToCartResponse>* AsyncAddProductToCartRaw(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::AddProductToCartResponse>* PrepareAsyncAddProductToCartRaw(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::DeleteProductFromCartResponse>* AsyncDeleteProductFromCartRaw(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::DeleteProductFromCartResponse>* PrepareAsyncDeleteProductFromCartRaw(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::GetCountOfProductInCartResponse>* AsyncGetCountOfProductInCartRaw(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::GetCountOfProductInCartResponse>* PrepareAsyncGetCountOfProductInCartRaw(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateOrderResponse>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateOrderResponse>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateSubOrderResponse>* AsyncCreateSubOrderRaw(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::CreateSubOrderResponse>* PrepareAsyncCreateSubOrderRaw(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::GetSubOrderResponse>* AsyncGetSubOrderRaw(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::GetSubOrderResponse>* PrepareAsyncGetSubOrderRaw(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::UpdateSubOrderResponse>* AsyncUpdateSubOrderRaw(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::UpdateSubOrderResponse>* PrepareAsyncUpdateSubOrderRaw(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::ListSubOrderResponse>* AsyncListSubOrderRaw(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order::ListSubOrderResponse>* PrepareAsyncListSubOrderRaw(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::order::ListCartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>> AsyncListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>>(AsyncListCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>> PrepareAsyncListCart(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>>(PrepareAsyncListCartRaw(context, request, cq));
    }
    ::grpc::Status AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::order::AddProductToCartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>> AsyncAddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>>(AsyncAddProductToCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>> PrepareAsyncAddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>>(PrepareAsyncAddProductToCartRaw(context, request, cq));
    }
    ::grpc::Status DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::order::DeleteProductFromCartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>> AsyncDeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>>(AsyncDeleteProductFromCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>> PrepareAsyncDeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>>(PrepareAsyncDeleteProductFromCartRaw(context, request, cq));
    }
    ::grpc::Status GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::order::GetCountOfProductInCartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>> AsyncGetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>>(AsyncGetCountOfProductInCartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>> PrepareAsyncGetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>>(PrepareAsyncGetCountOfProductInCartRaw(context, request, cq));
    }
    ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::order::CreateOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>> AsyncCreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    ::grpc::Status CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::order::CreateSubOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>> AsyncCreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>>(AsyncCreateSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>> PrepareAsyncCreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>>(PrepareAsyncCreateSubOrderRaw(context, request, cq));
    }
    ::grpc::Status GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::order::GetSubOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>> AsyncGetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>>(AsyncGetSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>> PrepareAsyncGetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>>(PrepareAsyncGetSubOrderRaw(context, request, cq));
    }
    ::grpc::Status UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::order::UpdateSubOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>> AsyncUpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>>(AsyncUpdateSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>> PrepareAsyncUpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>>(PrepareAsyncUpdateSubOrderRaw(context, request, cq));
    }
    ::grpc::Status ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::order::ListSubOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>> AsyncListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>>(AsyncListSubOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>> PrepareAsyncListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>>(PrepareAsyncListSubOrderRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCart(::grpc::ClientContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response, std::function<void(::grpc::Status)>) override;
      void AddProductToCart(::grpc::ClientContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteProductFromCart(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCountOfProductInCart(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOrder(::grpc::ClientContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSubOrder(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSubOrder(::grpc::ClientContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSubOrder(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSubOrder(::grpc::ClientContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>* AsyncListCartRaw(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::ListCartResponse>* PrepareAsyncListCartRaw(::grpc::ClientContext* context, const ::order::ListCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>* AsyncAddProductToCartRaw(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::AddProductToCartResponse>* PrepareAsyncAddProductToCartRaw(::grpc::ClientContext* context, const ::order::AddProductToCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>* AsyncDeleteProductFromCartRaw(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::DeleteProductFromCartResponse>* PrepareAsyncDeleteProductFromCartRaw(::grpc::ClientContext* context, const ::order::DeleteProductFromCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>* AsyncGetCountOfProductInCartRaw(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::GetCountOfProductInCartResponse>* PrepareAsyncGetCountOfProductInCartRaw(::grpc::ClientContext* context, const ::order::GetCountOfProductInCartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::CreateOrderResponse>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::order::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>* AsyncCreateSubOrderRaw(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::CreateSubOrderResponse>* PrepareAsyncCreateSubOrderRaw(::grpc::ClientContext* context, const ::order::CreateSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>* AsyncGetSubOrderRaw(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::GetSubOrderResponse>* PrepareAsyncGetSubOrderRaw(::grpc::ClientContext* context, const ::order::GetSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>* AsyncUpdateSubOrderRaw(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::UpdateSubOrderResponse>* PrepareAsyncUpdateSubOrderRaw(::grpc::ClientContext* context, const ::order::UpdateSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>* AsyncListSubOrderRaw(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order::ListSubOrderResponse>* PrepareAsyncListSubOrderRaw(::grpc::ClientContext* context, const ::order::ListSubOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListCart_;
    const ::grpc::internal::RpcMethod rpcmethod_AddProductToCart_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteProductFromCart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCountOfProductInCart_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSubOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSubOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSubOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListCart(::grpc::ServerContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response);
    virtual ::grpc::Status AddProductToCart(::grpc::ServerContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response);
    virtual ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response);
    virtual ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response);
    virtual ::grpc::Status CreateOrder(::grpc::ServerContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response);
    virtual ::grpc::Status CreateSubOrder(::grpc::ServerContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response);
    virtual ::grpc::Status GetSubOrder(::grpc::ServerContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response);
    virtual ::grpc::Status UpdateSubOrder(::grpc::ServerContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response);
    virtual ::grpc::Status ListSubOrder(::grpc::ServerContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCart() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCart(::grpc::ServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCart(::grpc::ServerContext* context, ::order::ListCartRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::ListCartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddProductToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddProductToCart() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddProductToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddProductToCart(::grpc::ServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddProductToCart(::grpc::ServerContext* context, ::order::AddProductToCartRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::AddProductToCartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProductFromCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteProductFromCart() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteProductFromCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProductFromCart(::grpc::ServerContext* context, ::order::DeleteProductFromCartRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::DeleteProductFromCartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCountOfProductInCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCountOfProductInCart() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCountOfProductInCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCountOfProductInCart(::grpc::ServerContext* context, ::order::GetCountOfProductInCartRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::GetCountOfProductInCartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::order::CreateOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::CreateOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSubOrder() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubOrder(::grpc::ServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubOrder(::grpc::ServerContext* context, ::order::CreateSubOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::CreateSubOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubOrder() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubOrder(::grpc::ServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubOrder(::grpc::ServerContext* context, ::order::GetSubOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::GetSubOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSubOrder() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubOrder(::grpc::ServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubOrder(::grpc::ServerContext* context, ::order::UpdateSubOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::UpdateSubOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSubOrder() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ListSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubOrder(::grpc::ServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubOrder(::grpc::ServerContext* context, ::order::ListSubOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::order::ListSubOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListCart<WithAsyncMethod_AddProductToCart<WithAsyncMethod_DeleteProductFromCart<WithAsyncMethod_GetCountOfProductInCart<WithAsyncMethod_CreateOrder<WithAsyncMethod_CreateSubOrder<WithAsyncMethod_GetSubOrder<WithAsyncMethod_UpdateSubOrder<WithAsyncMethod_ListSubOrder<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCart() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::order::ListCartRequest, ::order::ListCartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::ListCartRequest* request, ::order::ListCartResponse* response) { return this->ListCart(context, request, response); }));}
    void SetMessageAllocatorFor_ListCart(
        ::grpc::MessageAllocator< ::order::ListCartRequest, ::order::ListCartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::ListCartRequest, ::order::ListCartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCart(::grpc::ServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCart(
      ::grpc::CallbackServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddProductToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddProductToCart() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::order::AddProductToCartRequest, ::order::AddProductToCartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::AddProductToCartRequest* request, ::order::AddProductToCartResponse* response) { return this->AddProductToCart(context, request, response); }));}
    void SetMessageAllocatorFor_AddProductToCart(
        ::grpc::MessageAllocator< ::order::AddProductToCartRequest, ::order::AddProductToCartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::AddProductToCartRequest, ::order::AddProductToCartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddProductToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddProductToCart(::grpc::ServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddProductToCart(
      ::grpc::CallbackServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteProductFromCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteProductFromCart() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::DeleteProductFromCartRequest* request, ::order::DeleteProductFromCartResponse* response) { return this->DeleteProductFromCart(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteProductFromCart(
        ::grpc::MessageAllocator< ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteProductFromCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteProductFromCart(
      ::grpc::CallbackServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCountOfProductInCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCountOfProductInCart() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::GetCountOfProductInCartRequest* request, ::order::GetCountOfProductInCartResponse* response) { return this->GetCountOfProductInCart(context, request, response); }));}
    void SetMessageAllocatorFor_GetCountOfProductInCart(
        ::grpc::MessageAllocator< ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCountOfProductInCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCountOfProductInCart(
      ::grpc::CallbackServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateOrder() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::order::CreateOrderRequest, ::order::CreateOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::CreateOrderRequest* request, ::order::CreateOrderResponse* response) { return this->CreateOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrder(
        ::grpc::MessageAllocator< ::order::CreateOrderRequest, ::order::CreateOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::CreateOrderRequest, ::order::CreateOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSubOrder() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::CreateSubOrderRequest* request, ::order::CreateSubOrderResponse* response) { return this->CreateSubOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSubOrder(
        ::grpc::MessageAllocator< ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubOrder(::grpc::ServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubOrder() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::order::GetSubOrderRequest, ::order::GetSubOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::GetSubOrderRequest* request, ::order::GetSubOrderResponse* response) { return this->GetSubOrder(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubOrder(
        ::grpc::MessageAllocator< ::order::GetSubOrderRequest, ::order::GetSubOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::GetSubOrderRequest, ::order::GetSubOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubOrder(::grpc::ServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSubOrder() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::UpdateSubOrderRequest* request, ::order::UpdateSubOrderResponse* response) { return this->UpdateSubOrder(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSubOrder(
        ::grpc::MessageAllocator< ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubOrder(::grpc::ServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSubOrder() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::order::ListSubOrderRequest, ::order::ListSubOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order::ListSubOrderRequest* request, ::order::ListSubOrderResponse* response) { return this->ListSubOrder(context, request, response); }));}
    void SetMessageAllocatorFor_ListSubOrder(
        ::grpc::MessageAllocator< ::order::ListSubOrderRequest, ::order::ListSubOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order::ListSubOrderRequest, ::order::ListSubOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubOrder(::grpc::ServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListCart<WithCallbackMethod_AddProductToCart<WithCallbackMethod_DeleteProductFromCart<WithCallbackMethod_GetCountOfProductInCart<WithCallbackMethod_CreateOrder<WithCallbackMethod_CreateSubOrder<WithCallbackMethod_GetSubOrder<WithCallbackMethod_UpdateSubOrder<WithCallbackMethod_ListSubOrder<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCart() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCart(::grpc::ServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddProductToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddProductToCart() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddProductToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddProductToCart(::grpc::ServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProductFromCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteProductFromCart() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteProductFromCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCountOfProductInCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCountOfProductInCart() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCountOfProductInCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSubOrder() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubOrder(::grpc::ServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubOrder() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubOrder(::grpc::ServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSubOrder() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubOrder(::grpc::ServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSubOrder() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ListSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubOrder(::grpc::ServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCart() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCart(::grpc::ServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddProductToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddProductToCart() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddProductToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddProductToCart(::grpc::ServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddProductToCart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteProductFromCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteProductFromCart() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteProductFromCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProductFromCart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCountOfProductInCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCountOfProductInCart() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetCountOfProductInCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCountOfProductInCart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSubOrder() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubOrder(::grpc::ServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubOrder() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubOrder(::grpc::ServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSubOrder() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubOrder(::grpc::ServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSubOrder() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ListSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubOrder(::grpc::ServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCart() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCart(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCart(::grpc::ServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddProductToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddProductToCart() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddProductToCart(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddProductToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddProductToCart(::grpc::ServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddProductToCart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteProductFromCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteProductFromCart() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteProductFromCart(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteProductFromCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteProductFromCart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCountOfProductInCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCountOfProductInCart() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCountOfProductInCart(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCountOfProductInCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCountOfProductInCart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSubOrder() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSubOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubOrder(::grpc::ServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubOrder() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubOrder(::grpc::ServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSubOrder() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSubOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubOrder(::grpc::ServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSubOrder() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSubOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubOrder(::grpc::ServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCart() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::ListCartRequest, ::order::ListCartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::ListCartRequest, ::order::ListCartResponse>* streamer) {
                       return this->StreamedListCart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCart(::grpc::ServerContext* /*context*/, const ::order::ListCartRequest* /*request*/, ::order::ListCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::ListCartRequest,::order::ListCartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddProductToCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddProductToCart() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::AddProductToCartRequest, ::order::AddProductToCartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::AddProductToCartRequest, ::order::AddProductToCartResponse>* streamer) {
                       return this->StreamedAddProductToCart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddProductToCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddProductToCart(::grpc::ServerContext* /*context*/, const ::order::AddProductToCartRequest* /*request*/, ::order::AddProductToCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddProductToCart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::AddProductToCartRequest,::order::AddProductToCartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProductFromCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteProductFromCart() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::DeleteProductFromCartRequest, ::order::DeleteProductFromCartResponse>* streamer) {
                       return this->StreamedDeleteProductFromCart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteProductFromCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProductFromCart(::grpc::ServerContext* /*context*/, const ::order::DeleteProductFromCartRequest* /*request*/, ::order::DeleteProductFromCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProductFromCart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::DeleteProductFromCartRequest,::order::DeleteProductFromCartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCountOfProductInCart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCountOfProductInCart() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::GetCountOfProductInCartRequest, ::order::GetCountOfProductInCartResponse>* streamer) {
                       return this->StreamedGetCountOfProductInCart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCountOfProductInCart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCountOfProductInCart(::grpc::ServerContext* /*context*/, const ::order::GetCountOfProductInCartRequest* /*request*/, ::order::GetCountOfProductInCartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCountOfProductInCart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::GetCountOfProductInCartRequest,::order::GetCountOfProductInCartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::CreateOrderRequest, ::order::CreateOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::CreateOrderRequest, ::order::CreateOrderResponse>* streamer) {
                       return this->StreamedCreateOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::order::CreateOrderRequest* /*request*/, ::order::CreateOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::CreateOrderRequest,::order::CreateOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSubOrder() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::CreateSubOrderRequest, ::order::CreateSubOrderResponse>* streamer) {
                       return this->StreamedCreateSubOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSubOrder(::grpc::ServerContext* /*context*/, const ::order::CreateSubOrderRequest* /*request*/, ::order::CreateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSubOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::CreateSubOrderRequest,::order::CreateSubOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubOrder() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::GetSubOrderRequest, ::order::GetSubOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::GetSubOrderRequest, ::order::GetSubOrderResponse>* streamer) {
                       return this->StreamedGetSubOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubOrder(::grpc::ServerContext* /*context*/, const ::order::GetSubOrderRequest* /*request*/, ::order::GetSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::GetSubOrderRequest,::order::GetSubOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSubOrder() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::UpdateSubOrderRequest, ::order::UpdateSubOrderResponse>* streamer) {
                       return this->StreamedUpdateSubOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSubOrder(::grpc::ServerContext* /*context*/, const ::order::UpdateSubOrderRequest* /*request*/, ::order::UpdateSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSubOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::UpdateSubOrderRequest,::order::UpdateSubOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSubOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSubOrder() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order::ListSubOrderRequest, ::order::ListSubOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order::ListSubOrderRequest, ::order::ListSubOrderResponse>* streamer) {
                       return this->StreamedListSubOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSubOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSubOrder(::grpc::ServerContext* /*context*/, const ::order::ListSubOrderRequest* /*request*/, ::order::ListSubOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSubOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order::ListSubOrderRequest,::order::ListSubOrderResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListCart<WithStreamedUnaryMethod_AddProductToCart<WithStreamedUnaryMethod_DeleteProductFromCart<WithStreamedUnaryMethod_GetCountOfProductInCart<WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_CreateSubOrder<WithStreamedUnaryMethod_GetSubOrder<WithStreamedUnaryMethod_UpdateSubOrder<WithStreamedUnaryMethod_ListSubOrder<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListCart<WithStreamedUnaryMethod_AddProductToCart<WithStreamedUnaryMethod_DeleteProductFromCart<WithStreamedUnaryMethod_GetCountOfProductInCart<WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_CreateSubOrder<WithStreamedUnaryMethod_GetSubOrder<WithStreamedUnaryMethod_UpdateSubOrder<WithStreamedUnaryMethod_ListSubOrder<Service > > > > > > > > > StreamedService;
};

}  // namespace order


#endif  // GRPC_order_2forder_2eproto__INCLUDED

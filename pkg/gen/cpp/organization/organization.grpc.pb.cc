// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: organization/organization.proto

#include "organization/organization.pb.h"
#include "organization/organization.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace organization {

static const char* OrganizationService_method_names[] = {
  "/organization.OrganizationService/CreateOrganization",
  "/organization.OrganizationService/GetOrganization",
  "/organization.OrganizationService/ListOrganizations",
  "/organization.OrganizationService/PatchOrganization",
  "/organization.OrganizationService/UpdateOrganization",
  "/organization.OrganizationService/CreateCounterparty",
  "/organization.OrganizationService/GetCounterparty",
  "/organization.OrganizationService/ListCounterparties",
  "/organization.OrganizationService/PatchCounterparty",
  "/organization.OrganizationService/ListBankAccounts",
  "/organization.OrganizationService/GetDefaultBankAccount",
  "/organization.OrganizationService/CreateBankAccount",
  "/organization.OrganizationService/UpdateBankAccount",
  "/organization.OrganizationService/UpdateBankAccounts",
  "/organization.OrganizationService/DeleteBankAccount",
  "/organization.OrganizationService/CreateAddress",
  "/organization.OrganizationService/GetAddress",
  "/organization.OrganizationService/UpdateAddress",
  "/organization.OrganizationService/PatchAddress",
  "/organization.OrganizationService/DeleteAddress",
  "/organization.OrganizationService/CreateRelationship",
  "/organization.OrganizationService/ListRelationships",
  "/organization.OrganizationService/EnsureRelationshipExists",
  "/organization.OrganizationService/UpdateRelationship",
  "/organization.OrganizationService/GetRelationshipType",
  "/organization.OrganizationService/ListRelationshipTypes",
  "/organization.OrganizationService/CreateRelationshipType",
  "/organization.OrganizationService/UpdateRelationshipType",
  "/organization.OrganizationService/CreateContact",
  "/organization.OrganizationService/GetContact",
  "/organization.OrganizationService/UpdateContact",
  "/organization.OrganizationService/DeleteContact",
  "/organization.OrganizationService/ListContacts",
  "/organization.OrganizationService/GeneratePresignedURLs",
  "/organization.OrganizationService/CreateSaleSettings",
  "/organization.OrganizationService/GetSaleSettings",
  "/organization.OrganizationService/UpdateSaleSettings",
};

std::unique_ptr< OrganizationService::Stub> OrganizationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrganizationService::Stub> stub(new OrganizationService::Stub(channel, options));
  return stub;
}

OrganizationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateOrganization_(OrganizationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrganization_(OrganizationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrganizations_(OrganizationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchOrganization_(OrganizationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrganization_(OrganizationService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCounterparty_(OrganizationService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCounterparty_(OrganizationService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCounterparties_(OrganizationService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchCounterparty_(OrganizationService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBankAccounts_(OrganizationService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDefaultBankAccount_(OrganizationService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateBankAccount_(OrganizationService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBankAccount_(OrganizationService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBankAccounts_(OrganizationService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteBankAccount_(OrganizationService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAddress_(OrganizationService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAddress_(OrganizationService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAddress_(OrganizationService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchAddress_(OrganizationService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAddress_(OrganizationService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRelationship_(OrganizationService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRelationships_(OrganizationService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnsureRelationshipExists_(OrganizationService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRelationship_(OrganizationService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRelationshipType_(OrganizationService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRelationshipTypes_(OrganizationService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRelationshipType_(OrganizationService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRelationshipType_(OrganizationService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateContact_(OrganizationService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContact_(OrganizationService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateContact_(OrganizationService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteContact_(OrganizationService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListContacts_(OrganizationService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GeneratePresignedURLs_(OrganizationService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSaleSettings_(OrganizationService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSaleSettings_(OrganizationService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSaleSettings_(OrganizationService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrganizationService::Stub::CreateOrganization(::grpc::ClientContext* context, const ::organization::CreateOrganizationRequest& request, ::organization::CreateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateOrganizationRequest, ::organization::CreateOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateOrganization_, context, request, response);
}

void OrganizationService::Stub::async::CreateOrganization(::grpc::ClientContext* context, const ::organization::CreateOrganizationRequest* request, ::organization::CreateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateOrganizationRequest, ::organization::CreateOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateOrganization(::grpc::ClientContext* context, const ::organization::CreateOrganizationRequest* request, ::organization::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateOrganizationResponse>* OrganizationService::Stub::PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::organization::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateOrganizationResponse, ::organization::CreateOrganizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateOrganizationResponse>* OrganizationService::Stub::AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::organization::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrganizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetOrganization(::grpc::ClientContext* context, const ::organization::GetOrganizationRequest& request, ::organization::GetOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetOrganizationRequest, ::organization::GetOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrganization_, context, request, response);
}

void OrganizationService::Stub::async::GetOrganization(::grpc::ClientContext* context, const ::organization::GetOrganizationRequest* request, ::organization::GetOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetOrganizationRequest, ::organization::GetOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetOrganization(::grpc::ClientContext* context, const ::organization::GetOrganizationRequest* request, ::organization::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetOrganizationResponse>* OrganizationService::Stub::PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::organization::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetOrganizationResponse, ::organization::GetOrganizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrganization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetOrganizationResponse>* OrganizationService::Stub::AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::organization::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrganizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::ListOrganizations(::grpc::ClientContext* context, const ::organization::ListOrganizationsRequest& request, ::organization::ListOrganizationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::ListOrganizationsRequest, ::organization::ListOrganizationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListOrganizations_, context, request, response);
}

void OrganizationService::Stub::async::ListOrganizations(::grpc::ClientContext* context, const ::organization::ListOrganizationsRequest* request, ::organization::ListOrganizationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::ListOrganizationsRequest, ::organization::ListOrganizationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrganizations_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::ListOrganizations(::grpc::ClientContext* context, const ::organization::ListOrganizationsRequest* request, ::organization::ListOrganizationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrganizations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::ListOrganizationsResponse>* OrganizationService::Stub::PrepareAsyncListOrganizationsRaw(::grpc::ClientContext* context, const ::organization::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::ListOrganizationsResponse, ::organization::ListOrganizationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListOrganizations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::ListOrganizationsResponse>* OrganizationService::Stub::AsyncListOrganizationsRaw(::grpc::ClientContext* context, const ::organization::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListOrganizationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::PatchOrganization(::grpc::ClientContext* context, const ::organization::PatchOrganizationRequest& request, ::organization::PatchOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::PatchOrganizationRequest, ::organization::PatchOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchOrganization_, context, request, response);
}

void OrganizationService::Stub::async::PatchOrganization(::grpc::ClientContext* context, const ::organization::PatchOrganizationRequest* request, ::organization::PatchOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::PatchOrganizationRequest, ::organization::PatchOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchOrganization_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::PatchOrganization(::grpc::ClientContext* context, const ::organization::PatchOrganizationRequest* request, ::organization::PatchOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::PatchOrganizationResponse>* OrganizationService::Stub::PrepareAsyncPatchOrganizationRaw(::grpc::ClientContext* context, const ::organization::PatchOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::PatchOrganizationResponse, ::organization::PatchOrganizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchOrganization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::PatchOrganizationResponse>* OrganizationService::Stub::AsyncPatchOrganizationRaw(::grpc::ClientContext* context, const ::organization::PatchOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchOrganizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateOrganization(::grpc::ClientContext* context, const ::organization::UpdateOrganizationRequest& request, ::organization::UpdateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateOrganizationRequest, ::organization::UpdateOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrganization_, context, request, response);
}

void OrganizationService::Stub::async::UpdateOrganization(::grpc::ClientContext* context, const ::organization::UpdateOrganizationRequest* request, ::organization::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateOrganizationRequest, ::organization::UpdateOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateOrganization(::grpc::ClientContext* context, const ::organization::UpdateOrganizationRequest* request, ::organization::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateOrganizationResponse>* OrganizationService::Stub::PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::organization::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateOrganizationResponse, ::organization::UpdateOrganizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateOrganizationResponse>* OrganizationService::Stub::AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::organization::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrganizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateCounterparty(::grpc::ClientContext* context, const ::organization::CreateCounterpartyRequest& request, ::organization::CreateCounterpartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateCounterpartyRequest, ::organization::CreateCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCounterparty_, context, request, response);
}

void OrganizationService::Stub::async::CreateCounterparty(::grpc::ClientContext* context, const ::organization::CreateCounterpartyRequest* request, ::organization::CreateCounterpartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateCounterpartyRequest, ::organization::CreateCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCounterparty_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateCounterparty(::grpc::ClientContext* context, const ::organization::CreateCounterpartyRequest* request, ::organization::CreateCounterpartyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCounterparty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateCounterpartyResponse>* OrganizationService::Stub::PrepareAsyncCreateCounterpartyRaw(::grpc::ClientContext* context, const ::organization::CreateCounterpartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateCounterpartyResponse, ::organization::CreateCounterpartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCounterparty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateCounterpartyResponse>* OrganizationService::Stub::AsyncCreateCounterpartyRaw(::grpc::ClientContext* context, const ::organization::CreateCounterpartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCounterpartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetCounterparty(::grpc::ClientContext* context, const ::organization::GetCounterpartyRequest& request, ::organization::GetCounterpartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetCounterpartyRequest, ::organization::GetCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCounterparty_, context, request, response);
}

void OrganizationService::Stub::async::GetCounterparty(::grpc::ClientContext* context, const ::organization::GetCounterpartyRequest* request, ::organization::GetCounterpartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetCounterpartyRequest, ::organization::GetCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCounterparty_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetCounterparty(::grpc::ClientContext* context, const ::organization::GetCounterpartyRequest* request, ::organization::GetCounterpartyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCounterparty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetCounterpartyResponse>* OrganizationService::Stub::PrepareAsyncGetCounterpartyRaw(::grpc::ClientContext* context, const ::organization::GetCounterpartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetCounterpartyResponse, ::organization::GetCounterpartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCounterparty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetCounterpartyResponse>* OrganizationService::Stub::AsyncGetCounterpartyRaw(::grpc::ClientContext* context, const ::organization::GetCounterpartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCounterpartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::ListCounterparties(::grpc::ClientContext* context, const ::organization::ListCounterpartiesRequest& request, ::organization::ListCounterpartiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::ListCounterpartiesRequest, ::organization::ListCounterpartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCounterparties_, context, request, response);
}

void OrganizationService::Stub::async::ListCounterparties(::grpc::ClientContext* context, const ::organization::ListCounterpartiesRequest* request, ::organization::ListCounterpartiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::ListCounterpartiesRequest, ::organization::ListCounterpartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCounterparties_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::ListCounterparties(::grpc::ClientContext* context, const ::organization::ListCounterpartiesRequest* request, ::organization::ListCounterpartiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCounterparties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::ListCounterpartiesResponse>* OrganizationService::Stub::PrepareAsyncListCounterpartiesRaw(::grpc::ClientContext* context, const ::organization::ListCounterpartiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::ListCounterpartiesResponse, ::organization::ListCounterpartiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCounterparties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::ListCounterpartiesResponse>* OrganizationService::Stub::AsyncListCounterpartiesRaw(::grpc::ClientContext* context, const ::organization::ListCounterpartiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCounterpartiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::PatchCounterparty(::grpc::ClientContext* context, const ::organization::PatchCounterpartyRequest& request, ::organization::PatchCounterpartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::PatchCounterpartyRequest, ::organization::PatchCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchCounterparty_, context, request, response);
}

void OrganizationService::Stub::async::PatchCounterparty(::grpc::ClientContext* context, const ::organization::PatchCounterpartyRequest* request, ::organization::PatchCounterpartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::PatchCounterpartyRequest, ::organization::PatchCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchCounterparty_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::PatchCounterparty(::grpc::ClientContext* context, const ::organization::PatchCounterpartyRequest* request, ::organization::PatchCounterpartyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchCounterparty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::PatchCounterpartyResponse>* OrganizationService::Stub::PrepareAsyncPatchCounterpartyRaw(::grpc::ClientContext* context, const ::organization::PatchCounterpartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::PatchCounterpartyResponse, ::organization::PatchCounterpartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchCounterparty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::PatchCounterpartyResponse>* OrganizationService::Stub::AsyncPatchCounterpartyRaw(::grpc::ClientContext* context, const ::organization::PatchCounterpartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchCounterpartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::ListBankAccounts(::grpc::ClientContext* context, const ::organization::ListBankAccountsRequest& request, ::organization::ListBankAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::ListBankAccountsRequest, ::organization::ListBankAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBankAccounts_, context, request, response);
}

void OrganizationService::Stub::async::ListBankAccounts(::grpc::ClientContext* context, const ::organization::ListBankAccountsRequest* request, ::organization::ListBankAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::ListBankAccountsRequest, ::organization::ListBankAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBankAccounts_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::ListBankAccounts(::grpc::ClientContext* context, const ::organization::ListBankAccountsRequest* request, ::organization::ListBankAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBankAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::ListBankAccountsResponse>* OrganizationService::Stub::PrepareAsyncListBankAccountsRaw(::grpc::ClientContext* context, const ::organization::ListBankAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::ListBankAccountsResponse, ::organization::ListBankAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBankAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::ListBankAccountsResponse>* OrganizationService::Stub::AsyncListBankAccountsRaw(::grpc::ClientContext* context, const ::organization::ListBankAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBankAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetDefaultBankAccount(::grpc::ClientContext* context, const ::organization::GetDefaultBankAccountRequest& request, ::organization::GetDefaultBankAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetDefaultBankAccountRequest, ::organization::GetDefaultBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDefaultBankAccount_, context, request, response);
}

void OrganizationService::Stub::async::GetDefaultBankAccount(::grpc::ClientContext* context, const ::organization::GetDefaultBankAccountRequest* request, ::organization::GetDefaultBankAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetDefaultBankAccountRequest, ::organization::GetDefaultBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDefaultBankAccount_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetDefaultBankAccount(::grpc::ClientContext* context, const ::organization::GetDefaultBankAccountRequest* request, ::organization::GetDefaultBankAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDefaultBankAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetDefaultBankAccountResponse>* OrganizationService::Stub::PrepareAsyncGetDefaultBankAccountRaw(::grpc::ClientContext* context, const ::organization::GetDefaultBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetDefaultBankAccountResponse, ::organization::GetDefaultBankAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDefaultBankAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetDefaultBankAccountResponse>* OrganizationService::Stub::AsyncGetDefaultBankAccountRaw(::grpc::ClientContext* context, const ::organization::GetDefaultBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDefaultBankAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateBankAccount(::grpc::ClientContext* context, const ::organization::CreateBankAccountRequest& request, ::organization::CreateBankAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateBankAccountRequest, ::organization::CreateBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBankAccount_, context, request, response);
}

void OrganizationService::Stub::async::CreateBankAccount(::grpc::ClientContext* context, const ::organization::CreateBankAccountRequest* request, ::organization::CreateBankAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateBankAccountRequest, ::organization::CreateBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBankAccount_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateBankAccount(::grpc::ClientContext* context, const ::organization::CreateBankAccountRequest* request, ::organization::CreateBankAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBankAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateBankAccountResponse>* OrganizationService::Stub::PrepareAsyncCreateBankAccountRaw(::grpc::ClientContext* context, const ::organization::CreateBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateBankAccountResponse, ::organization::CreateBankAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBankAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateBankAccountResponse>* OrganizationService::Stub::AsyncCreateBankAccountRaw(::grpc::ClientContext* context, const ::organization::CreateBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBankAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateBankAccount(::grpc::ClientContext* context, const ::organization::UpdateBankAccountRequest& request, ::organization::UpdateBankAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateBankAccountRequest, ::organization::UpdateBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBankAccount_, context, request, response);
}

void OrganizationService::Stub::async::UpdateBankAccount(::grpc::ClientContext* context, const ::organization::UpdateBankAccountRequest* request, ::organization::UpdateBankAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateBankAccountRequest, ::organization::UpdateBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBankAccount_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateBankAccount(::grpc::ClientContext* context, const ::organization::UpdateBankAccountRequest* request, ::organization::UpdateBankAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBankAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateBankAccountResponse>* OrganizationService::Stub::PrepareAsyncUpdateBankAccountRaw(::grpc::ClientContext* context, const ::organization::UpdateBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateBankAccountResponse, ::organization::UpdateBankAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBankAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateBankAccountResponse>* OrganizationService::Stub::AsyncUpdateBankAccountRaw(::grpc::ClientContext* context, const ::organization::UpdateBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBankAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateBankAccounts(::grpc::ClientContext* context, const ::organization::UpdateBankAccountsRequest& request, ::organization::UpdateBankAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateBankAccountsRequest, ::organization::UpdateBankAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBankAccounts_, context, request, response);
}

void OrganizationService::Stub::async::UpdateBankAccounts(::grpc::ClientContext* context, const ::organization::UpdateBankAccountsRequest* request, ::organization::UpdateBankAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateBankAccountsRequest, ::organization::UpdateBankAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBankAccounts_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateBankAccounts(::grpc::ClientContext* context, const ::organization::UpdateBankAccountsRequest* request, ::organization::UpdateBankAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBankAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateBankAccountsResponse>* OrganizationService::Stub::PrepareAsyncUpdateBankAccountsRaw(::grpc::ClientContext* context, const ::organization::UpdateBankAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateBankAccountsResponse, ::organization::UpdateBankAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBankAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateBankAccountsResponse>* OrganizationService::Stub::AsyncUpdateBankAccountsRaw(::grpc::ClientContext* context, const ::organization::UpdateBankAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBankAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::DeleteBankAccount(::grpc::ClientContext* context, const ::organization::DeleteBankAccountRequest& request, ::organization::DeleteBankAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::DeleteBankAccountRequest, ::organization::DeleteBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBankAccount_, context, request, response);
}

void OrganizationService::Stub::async::DeleteBankAccount(::grpc::ClientContext* context, const ::organization::DeleteBankAccountRequest* request, ::organization::DeleteBankAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::DeleteBankAccountRequest, ::organization::DeleteBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBankAccount_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::DeleteBankAccount(::grpc::ClientContext* context, const ::organization::DeleteBankAccountRequest* request, ::organization::DeleteBankAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBankAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::DeleteBankAccountResponse>* OrganizationService::Stub::PrepareAsyncDeleteBankAccountRaw(::grpc::ClientContext* context, const ::organization::DeleteBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::DeleteBankAccountResponse, ::organization::DeleteBankAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBankAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::DeleteBankAccountResponse>* OrganizationService::Stub::AsyncDeleteBankAccountRaw(::grpc::ClientContext* context, const ::organization::DeleteBankAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBankAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateAddress(::grpc::ClientContext* context, const ::organization::CreateAddressRequest& request, ::organization::CreateAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateAddressRequest, ::organization::CreateAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAddress_, context, request, response);
}

void OrganizationService::Stub::async::CreateAddress(::grpc::ClientContext* context, const ::organization::CreateAddressRequest* request, ::organization::CreateAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateAddressRequest, ::organization::CreateAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAddress_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateAddress(::grpc::ClientContext* context, const ::organization::CreateAddressRequest* request, ::organization::CreateAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateAddressResponse>* OrganizationService::Stub::PrepareAsyncCreateAddressRaw(::grpc::ClientContext* context, const ::organization::CreateAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateAddressResponse, ::organization::CreateAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateAddressResponse>* OrganizationService::Stub::AsyncCreateAddressRaw(::grpc::ClientContext* context, const ::organization::CreateAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetAddress(::grpc::ClientContext* context, const ::organization::GetAddressRequest& request, ::organization::GetAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetAddressRequest, ::organization::GetAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAddress_, context, request, response);
}

void OrganizationService::Stub::async::GetAddress(::grpc::ClientContext* context, const ::organization::GetAddressRequest* request, ::organization::GetAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetAddressRequest, ::organization::GetAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAddress_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetAddress(::grpc::ClientContext* context, const ::organization::GetAddressRequest* request, ::organization::GetAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetAddressResponse>* OrganizationService::Stub::PrepareAsyncGetAddressRaw(::grpc::ClientContext* context, const ::organization::GetAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetAddressResponse, ::organization::GetAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetAddressResponse>* OrganizationService::Stub::AsyncGetAddressRaw(::grpc::ClientContext* context, const ::organization::GetAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateAddress(::grpc::ClientContext* context, const ::organization::UpdateAddressRequest& request, ::organization::UpdateAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateAddressRequest, ::organization::UpdateAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAddress_, context, request, response);
}

void OrganizationService::Stub::async::UpdateAddress(::grpc::ClientContext* context, const ::organization::UpdateAddressRequest* request, ::organization::UpdateAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateAddressRequest, ::organization::UpdateAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAddress_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateAddress(::grpc::ClientContext* context, const ::organization::UpdateAddressRequest* request, ::organization::UpdateAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateAddressResponse>* OrganizationService::Stub::PrepareAsyncUpdateAddressRaw(::grpc::ClientContext* context, const ::organization::UpdateAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateAddressResponse, ::organization::UpdateAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateAddressResponse>* OrganizationService::Stub::AsyncUpdateAddressRaw(::grpc::ClientContext* context, const ::organization::UpdateAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::PatchAddress(::grpc::ClientContext* context, const ::organization::PatchAddressRequest& request, ::organization::PatchAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::PatchAddressRequest, ::organization::PatchAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchAddress_, context, request, response);
}

void OrganizationService::Stub::async::PatchAddress(::grpc::ClientContext* context, const ::organization::PatchAddressRequest* request, ::organization::PatchAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::PatchAddressRequest, ::organization::PatchAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchAddress_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::PatchAddress(::grpc::ClientContext* context, const ::organization::PatchAddressRequest* request, ::organization::PatchAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::PatchAddressResponse>* OrganizationService::Stub::PrepareAsyncPatchAddressRaw(::grpc::ClientContext* context, const ::organization::PatchAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::PatchAddressResponse, ::organization::PatchAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::PatchAddressResponse>* OrganizationService::Stub::AsyncPatchAddressRaw(::grpc::ClientContext* context, const ::organization::PatchAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::DeleteAddress(::grpc::ClientContext* context, const ::organization::DeleteAddressRequest& request, ::organization::DeleteAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::DeleteAddressRequest, ::organization::DeleteAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAddress_, context, request, response);
}

void OrganizationService::Stub::async::DeleteAddress(::grpc::ClientContext* context, const ::organization::DeleteAddressRequest* request, ::organization::DeleteAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::DeleteAddressRequest, ::organization::DeleteAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAddress_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::DeleteAddress(::grpc::ClientContext* context, const ::organization::DeleteAddressRequest* request, ::organization::DeleteAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::DeleteAddressResponse>* OrganizationService::Stub::PrepareAsyncDeleteAddressRaw(::grpc::ClientContext* context, const ::organization::DeleteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::DeleteAddressResponse, ::organization::DeleteAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::DeleteAddressResponse>* OrganizationService::Stub::AsyncDeleteAddressRaw(::grpc::ClientContext* context, const ::organization::DeleteAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateRelationship(::grpc::ClientContext* context, const ::organization::CreateRelationshipRequest& request, ::organization::CreateRelationshipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateRelationshipRequest, ::organization::CreateRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRelationship_, context, request, response);
}

void OrganizationService::Stub::async::CreateRelationship(::grpc::ClientContext* context, const ::organization::CreateRelationshipRequest* request, ::organization::CreateRelationshipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateRelationshipRequest, ::organization::CreateRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRelationship_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateRelationship(::grpc::ClientContext* context, const ::organization::CreateRelationshipRequest* request, ::organization::CreateRelationshipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRelationship_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateRelationshipResponse>* OrganizationService::Stub::PrepareAsyncCreateRelationshipRaw(::grpc::ClientContext* context, const ::organization::CreateRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateRelationshipResponse, ::organization::CreateRelationshipRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRelationship_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateRelationshipResponse>* OrganizationService::Stub::AsyncCreateRelationshipRaw(::grpc::ClientContext* context, const ::organization::CreateRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRelationshipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::ListRelationships(::grpc::ClientContext* context, const ::organization::ListRelationshipsRequest& request, ::organization::ListRelationshipsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::ListRelationshipsRequest, ::organization::ListRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRelationships_, context, request, response);
}

void OrganizationService::Stub::async::ListRelationships(::grpc::ClientContext* context, const ::organization::ListRelationshipsRequest* request, ::organization::ListRelationshipsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::ListRelationshipsRequest, ::organization::ListRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRelationships_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::ListRelationships(::grpc::ClientContext* context, const ::organization::ListRelationshipsRequest* request, ::organization::ListRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRelationships_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::ListRelationshipsResponse>* OrganizationService::Stub::PrepareAsyncListRelationshipsRaw(::grpc::ClientContext* context, const ::organization::ListRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::ListRelationshipsResponse, ::organization::ListRelationshipsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRelationships_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::ListRelationshipsResponse>* OrganizationService::Stub::AsyncListRelationshipsRaw(::grpc::ClientContext* context, const ::organization::ListRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRelationshipsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::EnsureRelationshipExists(::grpc::ClientContext* context, const ::organization::EnsureRelationshipExistsRequest& request, ::organization::EnsureRelationshipExistsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::EnsureRelationshipExistsRequest, ::organization::EnsureRelationshipExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnsureRelationshipExists_, context, request, response);
}

void OrganizationService::Stub::async::EnsureRelationshipExists(::grpc::ClientContext* context, const ::organization::EnsureRelationshipExistsRequest* request, ::organization::EnsureRelationshipExistsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::EnsureRelationshipExistsRequest, ::organization::EnsureRelationshipExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnsureRelationshipExists_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::EnsureRelationshipExists(::grpc::ClientContext* context, const ::organization::EnsureRelationshipExistsRequest* request, ::organization::EnsureRelationshipExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnsureRelationshipExists_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::EnsureRelationshipExistsResponse>* OrganizationService::Stub::PrepareAsyncEnsureRelationshipExistsRaw(::grpc::ClientContext* context, const ::organization::EnsureRelationshipExistsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::EnsureRelationshipExistsResponse, ::organization::EnsureRelationshipExistsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnsureRelationshipExists_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::EnsureRelationshipExistsResponse>* OrganizationService::Stub::AsyncEnsureRelationshipExistsRaw(::grpc::ClientContext* context, const ::organization::EnsureRelationshipExistsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnsureRelationshipExistsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateRelationship(::grpc::ClientContext* context, const ::organization::UpdateRelationshipRequest& request, ::organization::UpdateRelationshipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateRelationshipRequest, ::organization::UpdateRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRelationship_, context, request, response);
}

void OrganizationService::Stub::async::UpdateRelationship(::grpc::ClientContext* context, const ::organization::UpdateRelationshipRequest* request, ::organization::UpdateRelationshipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateRelationshipRequest, ::organization::UpdateRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRelationship_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateRelationship(::grpc::ClientContext* context, const ::organization::UpdateRelationshipRequest* request, ::organization::UpdateRelationshipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRelationship_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateRelationshipResponse>* OrganizationService::Stub::PrepareAsyncUpdateRelationshipRaw(::grpc::ClientContext* context, const ::organization::UpdateRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateRelationshipResponse, ::organization::UpdateRelationshipRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRelationship_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateRelationshipResponse>* OrganizationService::Stub::AsyncUpdateRelationshipRaw(::grpc::ClientContext* context, const ::organization::UpdateRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRelationshipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetRelationshipType(::grpc::ClientContext* context, const ::organization::GetRelationshipTypeRequest& request, ::organization::GetRelationshipTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetRelationshipTypeRequest, ::organization::GetRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRelationshipType_, context, request, response);
}

void OrganizationService::Stub::async::GetRelationshipType(::grpc::ClientContext* context, const ::organization::GetRelationshipTypeRequest* request, ::organization::GetRelationshipTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetRelationshipTypeRequest, ::organization::GetRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRelationshipType_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetRelationshipType(::grpc::ClientContext* context, const ::organization::GetRelationshipTypeRequest* request, ::organization::GetRelationshipTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRelationshipType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetRelationshipTypeResponse>* OrganizationService::Stub::PrepareAsyncGetRelationshipTypeRaw(::grpc::ClientContext* context, const ::organization::GetRelationshipTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetRelationshipTypeResponse, ::organization::GetRelationshipTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRelationshipType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetRelationshipTypeResponse>* OrganizationService::Stub::AsyncGetRelationshipTypeRaw(::grpc::ClientContext* context, const ::organization::GetRelationshipTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRelationshipTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::ListRelationshipTypes(::grpc::ClientContext* context, const ::organization::ListRelationshipTypesRequest& request, ::organization::ListRelationshipTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::ListRelationshipTypesRequest, ::organization::ListRelationshipTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRelationshipTypes_, context, request, response);
}

void OrganizationService::Stub::async::ListRelationshipTypes(::grpc::ClientContext* context, const ::organization::ListRelationshipTypesRequest* request, ::organization::ListRelationshipTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::ListRelationshipTypesRequest, ::organization::ListRelationshipTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRelationshipTypes_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::ListRelationshipTypes(::grpc::ClientContext* context, const ::organization::ListRelationshipTypesRequest* request, ::organization::ListRelationshipTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRelationshipTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::ListRelationshipTypesResponse>* OrganizationService::Stub::PrepareAsyncListRelationshipTypesRaw(::grpc::ClientContext* context, const ::organization::ListRelationshipTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::ListRelationshipTypesResponse, ::organization::ListRelationshipTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRelationshipTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::ListRelationshipTypesResponse>* OrganizationService::Stub::AsyncListRelationshipTypesRaw(::grpc::ClientContext* context, const ::organization::ListRelationshipTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRelationshipTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateRelationshipType(::grpc::ClientContext* context, const ::organization::CreateRelationshipTypeRequest& request, ::organization::CreateRelationshipTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateRelationshipTypeRequest, ::organization::CreateRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRelationshipType_, context, request, response);
}

void OrganizationService::Stub::async::CreateRelationshipType(::grpc::ClientContext* context, const ::organization::CreateRelationshipTypeRequest* request, ::organization::CreateRelationshipTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateRelationshipTypeRequest, ::organization::CreateRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRelationshipType_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateRelationshipType(::grpc::ClientContext* context, const ::organization::CreateRelationshipTypeRequest* request, ::organization::CreateRelationshipTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRelationshipType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateRelationshipTypeResponse>* OrganizationService::Stub::PrepareAsyncCreateRelationshipTypeRaw(::grpc::ClientContext* context, const ::organization::CreateRelationshipTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateRelationshipTypeResponse, ::organization::CreateRelationshipTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRelationshipType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateRelationshipTypeResponse>* OrganizationService::Stub::AsyncCreateRelationshipTypeRaw(::grpc::ClientContext* context, const ::organization::CreateRelationshipTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRelationshipTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateRelationshipType(::grpc::ClientContext* context, const ::organization::UpdateRelationshipTypeRequest& request, ::organization::UpdateRelationshipTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateRelationshipTypeRequest, ::organization::UpdateRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRelationshipType_, context, request, response);
}

void OrganizationService::Stub::async::UpdateRelationshipType(::grpc::ClientContext* context, const ::organization::UpdateRelationshipTypeRequest* request, ::organization::UpdateRelationshipTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateRelationshipTypeRequest, ::organization::UpdateRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRelationshipType_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateRelationshipType(::grpc::ClientContext* context, const ::organization::UpdateRelationshipTypeRequest* request, ::organization::UpdateRelationshipTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRelationshipType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateRelationshipTypeResponse>* OrganizationService::Stub::PrepareAsyncUpdateRelationshipTypeRaw(::grpc::ClientContext* context, const ::organization::UpdateRelationshipTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateRelationshipTypeResponse, ::organization::UpdateRelationshipTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRelationshipType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateRelationshipTypeResponse>* OrganizationService::Stub::AsyncUpdateRelationshipTypeRaw(::grpc::ClientContext* context, const ::organization::UpdateRelationshipTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRelationshipTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateContact(::grpc::ClientContext* context, const ::organization::CreateContactRequest& request, ::organization::CreateContactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateContactRequest, ::organization::CreateContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateContact_, context, request, response);
}

void OrganizationService::Stub::async::CreateContact(::grpc::ClientContext* context, const ::organization::CreateContactRequest* request, ::organization::CreateContactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateContactRequest, ::organization::CreateContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateContact_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateContact(::grpc::ClientContext* context, const ::organization::CreateContactRequest* request, ::organization::CreateContactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateContactResponse>* OrganizationService::Stub::PrepareAsyncCreateContactRaw(::grpc::ClientContext* context, const ::organization::CreateContactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateContactResponse, ::organization::CreateContactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateContact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateContactResponse>* OrganizationService::Stub::AsyncCreateContactRaw(::grpc::ClientContext* context, const ::organization::CreateContactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetContact(::grpc::ClientContext* context, const ::organization::GetContactRequest& request, ::organization::GetContactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetContactRequest, ::organization::GetContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContact_, context, request, response);
}

void OrganizationService::Stub::async::GetContact(::grpc::ClientContext* context, const ::organization::GetContactRequest* request, ::organization::GetContactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetContactRequest, ::organization::GetContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContact_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetContact(::grpc::ClientContext* context, const ::organization::GetContactRequest* request, ::organization::GetContactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetContactResponse>* OrganizationService::Stub::PrepareAsyncGetContactRaw(::grpc::ClientContext* context, const ::organization::GetContactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetContactResponse, ::organization::GetContactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetContactResponse>* OrganizationService::Stub::AsyncGetContactRaw(::grpc::ClientContext* context, const ::organization::GetContactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateContact(::grpc::ClientContext* context, const ::organization::UpdateContactRequest& request, ::organization::UpdateContactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateContactRequest, ::organization::UpdateContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateContact_, context, request, response);
}

void OrganizationService::Stub::async::UpdateContact(::grpc::ClientContext* context, const ::organization::UpdateContactRequest* request, ::organization::UpdateContactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateContactRequest, ::organization::UpdateContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateContact_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateContact(::grpc::ClientContext* context, const ::organization::UpdateContactRequest* request, ::organization::UpdateContactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateContactResponse>* OrganizationService::Stub::PrepareAsyncUpdateContactRaw(::grpc::ClientContext* context, const ::organization::UpdateContactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateContactResponse, ::organization::UpdateContactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateContact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateContactResponse>* OrganizationService::Stub::AsyncUpdateContactRaw(::grpc::ClientContext* context, const ::organization::UpdateContactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::DeleteContact(::grpc::ClientContext* context, const ::organization::DeleteContactRequest& request, ::organization::DeleteContactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::DeleteContactRequest, ::organization::DeleteContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteContact_, context, request, response);
}

void OrganizationService::Stub::async::DeleteContact(::grpc::ClientContext* context, const ::organization::DeleteContactRequest* request, ::organization::DeleteContactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::DeleteContactRequest, ::organization::DeleteContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteContact_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::DeleteContact(::grpc::ClientContext* context, const ::organization::DeleteContactRequest* request, ::organization::DeleteContactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::DeleteContactResponse>* OrganizationService::Stub::PrepareAsyncDeleteContactRaw(::grpc::ClientContext* context, const ::organization::DeleteContactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::DeleteContactResponse, ::organization::DeleteContactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteContact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::DeleteContactResponse>* OrganizationService::Stub::AsyncDeleteContactRaw(::grpc::ClientContext* context, const ::organization::DeleteContactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::ListContacts(::grpc::ClientContext* context, const ::organization::ListContactsRequest& request, ::organization::ListContactsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::ListContactsRequest, ::organization::ListContactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListContacts_, context, request, response);
}

void OrganizationService::Stub::async::ListContacts(::grpc::ClientContext* context, const ::organization::ListContactsRequest* request, ::organization::ListContactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::ListContactsRequest, ::organization::ListContactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListContacts_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::ListContacts(::grpc::ClientContext* context, const ::organization::ListContactsRequest* request, ::organization::ListContactsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListContacts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::ListContactsResponse>* OrganizationService::Stub::PrepareAsyncListContactsRaw(::grpc::ClientContext* context, const ::organization::ListContactsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::ListContactsResponse, ::organization::ListContactsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListContacts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::ListContactsResponse>* OrganizationService::Stub::AsyncListContactsRaw(::grpc::ClientContext* context, const ::organization::ListContactsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListContactsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GeneratePresignedURLs(::grpc::ClientContext* context, const ::organization::GeneratePresignedURLsRequest& request, ::organization::GeneratePresignedURLsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GeneratePresignedURLsRequest, ::organization::GeneratePresignedURLsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GeneratePresignedURLs_, context, request, response);
}

void OrganizationService::Stub::async::GeneratePresignedURLs(::grpc::ClientContext* context, const ::organization::GeneratePresignedURLsRequest* request, ::organization::GeneratePresignedURLsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GeneratePresignedURLsRequest, ::organization::GeneratePresignedURLsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePresignedURLs_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GeneratePresignedURLs(::grpc::ClientContext* context, const ::organization::GeneratePresignedURLsRequest* request, ::organization::GeneratePresignedURLsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePresignedURLs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GeneratePresignedURLsResponse>* OrganizationService::Stub::PrepareAsyncGeneratePresignedURLsRaw(::grpc::ClientContext* context, const ::organization::GeneratePresignedURLsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GeneratePresignedURLsResponse, ::organization::GeneratePresignedURLsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GeneratePresignedURLs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GeneratePresignedURLsResponse>* OrganizationService::Stub::AsyncGeneratePresignedURLsRaw(::grpc::ClientContext* context, const ::organization::GeneratePresignedURLsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGeneratePresignedURLsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::CreateSaleSettings(::grpc::ClientContext* context, const ::organization::CreateSaleSettingsRequest& request, ::organization::CreateSaleSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::CreateSaleSettingsRequest, ::organization::CreateSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSaleSettings_, context, request, response);
}

void OrganizationService::Stub::async::CreateSaleSettings(::grpc::ClientContext* context, const ::organization::CreateSaleSettingsRequest* request, ::organization::CreateSaleSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::CreateSaleSettingsRequest, ::organization::CreateSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSaleSettings_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::CreateSaleSettings(::grpc::ClientContext* context, const ::organization::CreateSaleSettingsRequest* request, ::organization::CreateSaleSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSaleSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateSaleSettingsResponse>* OrganizationService::Stub::PrepareAsyncCreateSaleSettingsRaw(::grpc::ClientContext* context, const ::organization::CreateSaleSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::CreateSaleSettingsResponse, ::organization::CreateSaleSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSaleSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::CreateSaleSettingsResponse>* OrganizationService::Stub::AsyncCreateSaleSettingsRaw(::grpc::ClientContext* context, const ::organization::CreateSaleSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSaleSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::GetSaleSettings(::grpc::ClientContext* context, const ::organization::GetSaleSettingsRequest& request, ::organization::GetSaleSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::GetSaleSettingsRequest, ::organization::GetSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSaleSettings_, context, request, response);
}

void OrganizationService::Stub::async::GetSaleSettings(::grpc::ClientContext* context, const ::organization::GetSaleSettingsRequest* request, ::organization::GetSaleSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::GetSaleSettingsRequest, ::organization::GetSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSaleSettings_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::GetSaleSettings(::grpc::ClientContext* context, const ::organization::GetSaleSettingsRequest* request, ::organization::GetSaleSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSaleSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::GetSaleSettingsResponse>* OrganizationService::Stub::PrepareAsyncGetSaleSettingsRaw(::grpc::ClientContext* context, const ::organization::GetSaleSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::GetSaleSettingsResponse, ::organization::GetSaleSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSaleSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::GetSaleSettingsResponse>* OrganizationService::Stub::AsyncGetSaleSettingsRaw(::grpc::ClientContext* context, const ::organization::GetSaleSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSaleSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrganizationService::Stub::UpdateSaleSettings(::grpc::ClientContext* context, const ::organization::UpdateSaleSettingsRequest& request, ::organization::UpdateSaleSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::organization::UpdateSaleSettingsRequest, ::organization::UpdateSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSaleSettings_, context, request, response);
}

void OrganizationService::Stub::async::UpdateSaleSettings(::grpc::ClientContext* context, const ::organization::UpdateSaleSettingsRequest* request, ::organization::UpdateSaleSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::organization::UpdateSaleSettingsRequest, ::organization::UpdateSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSaleSettings_, context, request, response, std::move(f));
}

void OrganizationService::Stub::async::UpdateSaleSettings(::grpc::ClientContext* context, const ::organization::UpdateSaleSettingsRequest* request, ::organization::UpdateSaleSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSaleSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateSaleSettingsResponse>* OrganizationService::Stub::PrepareAsyncUpdateSaleSettingsRaw(::grpc::ClientContext* context, const ::organization::UpdateSaleSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::organization::UpdateSaleSettingsResponse, ::organization::UpdateSaleSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSaleSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::organization::UpdateSaleSettingsResponse>* OrganizationService::Stub::AsyncUpdateSaleSettingsRaw(::grpc::ClientContext* context, const ::organization::UpdateSaleSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSaleSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrganizationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateOrganizationRequest, ::organization::CreateOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateOrganizationRequest* req,
             ::organization::CreateOrganizationResponse* resp) {
               return service->CreateOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetOrganizationRequest, ::organization::GetOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetOrganizationRequest* req,
             ::organization::GetOrganizationResponse* resp) {
               return service->GetOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::ListOrganizationsRequest, ::organization::ListOrganizationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::ListOrganizationsRequest* req,
             ::organization::ListOrganizationsResponse* resp) {
               return service->ListOrganizations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::PatchOrganizationRequest, ::organization::PatchOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::PatchOrganizationRequest* req,
             ::organization::PatchOrganizationResponse* resp) {
               return service->PatchOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateOrganizationRequest, ::organization::UpdateOrganizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateOrganizationRequest* req,
             ::organization::UpdateOrganizationResponse* resp) {
               return service->UpdateOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateCounterpartyRequest, ::organization::CreateCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateCounterpartyRequest* req,
             ::organization::CreateCounterpartyResponse* resp) {
               return service->CreateCounterparty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetCounterpartyRequest, ::organization::GetCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetCounterpartyRequest* req,
             ::organization::GetCounterpartyResponse* resp) {
               return service->GetCounterparty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::ListCounterpartiesRequest, ::organization::ListCounterpartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::ListCounterpartiesRequest* req,
             ::organization::ListCounterpartiesResponse* resp) {
               return service->ListCounterparties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::PatchCounterpartyRequest, ::organization::PatchCounterpartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::PatchCounterpartyRequest* req,
             ::organization::PatchCounterpartyResponse* resp) {
               return service->PatchCounterparty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::ListBankAccountsRequest, ::organization::ListBankAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::ListBankAccountsRequest* req,
             ::organization::ListBankAccountsResponse* resp) {
               return service->ListBankAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetDefaultBankAccountRequest, ::organization::GetDefaultBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetDefaultBankAccountRequest* req,
             ::organization::GetDefaultBankAccountResponse* resp) {
               return service->GetDefaultBankAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateBankAccountRequest, ::organization::CreateBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateBankAccountRequest* req,
             ::organization::CreateBankAccountResponse* resp) {
               return service->CreateBankAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateBankAccountRequest, ::organization::UpdateBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateBankAccountRequest* req,
             ::organization::UpdateBankAccountResponse* resp) {
               return service->UpdateBankAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateBankAccountsRequest, ::organization::UpdateBankAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateBankAccountsRequest* req,
             ::organization::UpdateBankAccountsResponse* resp) {
               return service->UpdateBankAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::DeleteBankAccountRequest, ::organization::DeleteBankAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::DeleteBankAccountRequest* req,
             ::organization::DeleteBankAccountResponse* resp) {
               return service->DeleteBankAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateAddressRequest, ::organization::CreateAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateAddressRequest* req,
             ::organization::CreateAddressResponse* resp) {
               return service->CreateAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetAddressRequest, ::organization::GetAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetAddressRequest* req,
             ::organization::GetAddressResponse* resp) {
               return service->GetAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateAddressRequest, ::organization::UpdateAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateAddressRequest* req,
             ::organization::UpdateAddressResponse* resp) {
               return service->UpdateAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::PatchAddressRequest, ::organization::PatchAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::PatchAddressRequest* req,
             ::organization::PatchAddressResponse* resp) {
               return service->PatchAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::DeleteAddressRequest, ::organization::DeleteAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::DeleteAddressRequest* req,
             ::organization::DeleteAddressResponse* resp) {
               return service->DeleteAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateRelationshipRequest, ::organization::CreateRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateRelationshipRequest* req,
             ::organization::CreateRelationshipResponse* resp) {
               return service->CreateRelationship(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::ListRelationshipsRequest, ::organization::ListRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::ListRelationshipsRequest* req,
             ::organization::ListRelationshipsResponse* resp) {
               return service->ListRelationships(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::EnsureRelationshipExistsRequest, ::organization::EnsureRelationshipExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::EnsureRelationshipExistsRequest* req,
             ::organization::EnsureRelationshipExistsResponse* resp) {
               return service->EnsureRelationshipExists(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateRelationshipRequest, ::organization::UpdateRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateRelationshipRequest* req,
             ::organization::UpdateRelationshipResponse* resp) {
               return service->UpdateRelationship(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetRelationshipTypeRequest, ::organization::GetRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetRelationshipTypeRequest* req,
             ::organization::GetRelationshipTypeResponse* resp) {
               return service->GetRelationshipType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::ListRelationshipTypesRequest, ::organization::ListRelationshipTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::ListRelationshipTypesRequest* req,
             ::organization::ListRelationshipTypesResponse* resp) {
               return service->ListRelationshipTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateRelationshipTypeRequest, ::organization::CreateRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateRelationshipTypeRequest* req,
             ::organization::CreateRelationshipTypeResponse* resp) {
               return service->CreateRelationshipType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateRelationshipTypeRequest, ::organization::UpdateRelationshipTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateRelationshipTypeRequest* req,
             ::organization::UpdateRelationshipTypeResponse* resp) {
               return service->UpdateRelationshipType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateContactRequest, ::organization::CreateContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateContactRequest* req,
             ::organization::CreateContactResponse* resp) {
               return service->CreateContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetContactRequest, ::organization::GetContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetContactRequest* req,
             ::organization::GetContactResponse* resp) {
               return service->GetContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateContactRequest, ::organization::UpdateContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateContactRequest* req,
             ::organization::UpdateContactResponse* resp) {
               return service->UpdateContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::DeleteContactRequest, ::organization::DeleteContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::DeleteContactRequest* req,
             ::organization::DeleteContactResponse* resp) {
               return service->DeleteContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::ListContactsRequest, ::organization::ListContactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::ListContactsRequest* req,
             ::organization::ListContactsResponse* resp) {
               return service->ListContacts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GeneratePresignedURLsRequest, ::organization::GeneratePresignedURLsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GeneratePresignedURLsRequest* req,
             ::organization::GeneratePresignedURLsResponse* resp) {
               return service->GeneratePresignedURLs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::CreateSaleSettingsRequest, ::organization::CreateSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::CreateSaleSettingsRequest* req,
             ::organization::CreateSaleSettingsResponse* resp) {
               return service->CreateSaleSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::GetSaleSettingsRequest, ::organization::GetSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::GetSaleSettingsRequest* req,
             ::organization::GetSaleSettingsResponse* resp) {
               return service->GetSaleSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::organization::UpdateSaleSettingsRequest, ::organization::UpdateSaleSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrganizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::organization::UpdateSaleSettingsRequest* req,
             ::organization::UpdateSaleSettingsResponse* resp) {
               return service->UpdateSaleSettings(ctx, req, resp);
             }, this)));
}

OrganizationService::Service::~Service() {
}

::grpc::Status OrganizationService::Service::CreateOrganization(::grpc::ServerContext* context, const ::organization::CreateOrganizationRequest* request, ::organization::CreateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetOrganization(::grpc::ServerContext* context, const ::organization::GetOrganizationRequest* request, ::organization::GetOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListOrganizations(::grpc::ServerContext* context, const ::organization::ListOrganizationsRequest* request, ::organization::ListOrganizationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::PatchOrganization(::grpc::ServerContext* context, const ::organization::PatchOrganizationRequest* request, ::organization::PatchOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateOrganization(::grpc::ServerContext* context, const ::organization::UpdateOrganizationRequest* request, ::organization::UpdateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateCounterparty(::grpc::ServerContext* context, const ::organization::CreateCounterpartyRequest* request, ::organization::CreateCounterpartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetCounterparty(::grpc::ServerContext* context, const ::organization::GetCounterpartyRequest* request, ::organization::GetCounterpartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListCounterparties(::grpc::ServerContext* context, const ::organization::ListCounterpartiesRequest* request, ::organization::ListCounterpartiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::PatchCounterparty(::grpc::ServerContext* context, const ::organization::PatchCounterpartyRequest* request, ::organization::PatchCounterpartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListBankAccounts(::grpc::ServerContext* context, const ::organization::ListBankAccountsRequest* request, ::organization::ListBankAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetDefaultBankAccount(::grpc::ServerContext* context, const ::organization::GetDefaultBankAccountRequest* request, ::organization::GetDefaultBankAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateBankAccount(::grpc::ServerContext* context, const ::organization::CreateBankAccountRequest* request, ::organization::CreateBankAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateBankAccount(::grpc::ServerContext* context, const ::organization::UpdateBankAccountRequest* request, ::organization::UpdateBankAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateBankAccounts(::grpc::ServerContext* context, const ::organization::UpdateBankAccountsRequest* request, ::organization::UpdateBankAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::DeleteBankAccount(::grpc::ServerContext* context, const ::organization::DeleteBankAccountRequest* request, ::organization::DeleteBankAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateAddress(::grpc::ServerContext* context, const ::organization::CreateAddressRequest* request, ::organization::CreateAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetAddress(::grpc::ServerContext* context, const ::organization::GetAddressRequest* request, ::organization::GetAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateAddress(::grpc::ServerContext* context, const ::organization::UpdateAddressRequest* request, ::organization::UpdateAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::PatchAddress(::grpc::ServerContext* context, const ::organization::PatchAddressRequest* request, ::organization::PatchAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::DeleteAddress(::grpc::ServerContext* context, const ::organization::DeleteAddressRequest* request, ::organization::DeleteAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateRelationship(::grpc::ServerContext* context, const ::organization::CreateRelationshipRequest* request, ::organization::CreateRelationshipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListRelationships(::grpc::ServerContext* context, const ::organization::ListRelationshipsRequest* request, ::organization::ListRelationshipsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::EnsureRelationshipExists(::grpc::ServerContext* context, const ::organization::EnsureRelationshipExistsRequest* request, ::organization::EnsureRelationshipExistsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateRelationship(::grpc::ServerContext* context, const ::organization::UpdateRelationshipRequest* request, ::organization::UpdateRelationshipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetRelationshipType(::grpc::ServerContext* context, const ::organization::GetRelationshipTypeRequest* request, ::organization::GetRelationshipTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListRelationshipTypes(::grpc::ServerContext* context, const ::organization::ListRelationshipTypesRequest* request, ::organization::ListRelationshipTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateRelationshipType(::grpc::ServerContext* context, const ::organization::CreateRelationshipTypeRequest* request, ::organization::CreateRelationshipTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateRelationshipType(::grpc::ServerContext* context, const ::organization::UpdateRelationshipTypeRequest* request, ::organization::UpdateRelationshipTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateContact(::grpc::ServerContext* context, const ::organization::CreateContactRequest* request, ::organization::CreateContactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetContact(::grpc::ServerContext* context, const ::organization::GetContactRequest* request, ::organization::GetContactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateContact(::grpc::ServerContext* context, const ::organization::UpdateContactRequest* request, ::organization::UpdateContactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::DeleteContact(::grpc::ServerContext* context, const ::organization::DeleteContactRequest* request, ::organization::DeleteContactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListContacts(::grpc::ServerContext* context, const ::organization::ListContactsRequest* request, ::organization::ListContactsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GeneratePresignedURLs(::grpc::ServerContext* context, const ::organization::GeneratePresignedURLsRequest* request, ::organization::GeneratePresignedURLsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::CreateSaleSettings(::grpc::ServerContext* context, const ::organization::CreateSaleSettingsRequest* request, ::organization::CreateSaleSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetSaleSettings(::grpc::ServerContext* context, const ::organization::GetSaleSettingsRequest* request, ::organization::GetSaleSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateSaleSettings(::grpc::ServerContext* context, const ::organization::UpdateSaleSettingsRequest* request, ::organization::UpdateSaleSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace organization


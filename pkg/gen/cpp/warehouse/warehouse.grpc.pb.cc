// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: warehouse/warehouse.proto

#include "warehouse/warehouse.pb.h"
#include "warehouse/warehouse.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace warehouse {

static const char* WarehouseService_method_names[] = {
  "/warehouse.WarehouseService/CreateWarehouse",
  "/warehouse.WarehouseService/ListWarehouses",
  "/warehouse.WarehouseService/UpdateWarehouse",
  "/warehouse.WarehouseService/GetProductsInWarehouse",
  "/warehouse.WarehouseService/GetWarehouseAnalytics",
  "/warehouse.WarehouseService/AddProductToWarehouse",
  "/warehouse.WarehouseService/CreateAcceptance",
  "/warehouse.WarehouseService/GetAcceptance",
  "/warehouse.WarehouseService/ListAcceptances",
  "/warehouse.WarehouseService/UpdateAcceptance",
  "/warehouse.WarehouseService/DeleteAcceptance",
  "/warehouse.WarehouseService/CreateWriteOff",
  "/warehouse.WarehouseService/GetWriteOff",
  "/warehouse.WarehouseService/ListWriteOff",
  "/warehouse.WarehouseService/CreateMoving",
  "/warehouse.WarehouseService/GetMoving",
  "/warehouse.WarehouseService/ListMoving",
  "/warehouse.WarehouseService/CreateInventory",
  "/warehouse.WarehouseService/GetInventory",
  "/warehouse.WarehouseService/ListInventory",
  "/warehouse.WarehouseService/GetCountProducts",
};

std::unique_ptr< WarehouseService::Stub> WarehouseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WarehouseService::Stub> stub(new WarehouseService::Stub(channel, options));
  return stub;
}

WarehouseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateWarehouse_(WarehouseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWarehouses_(WarehouseService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateWarehouse_(WarehouseService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProductsInWarehouse_(WarehouseService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWarehouseAnalytics_(WarehouseService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddProductToWarehouse_(WarehouseService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAcceptance_(WarehouseService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAcceptance_(WarehouseService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAcceptances_(WarehouseService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAcceptance_(WarehouseService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAcceptance_(WarehouseService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWriteOff_(WarehouseService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWriteOff_(WarehouseService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWriteOff_(WarehouseService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMoving_(WarehouseService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMoving_(WarehouseService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMoving_(WarehouseService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInventory_(WarehouseService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInventory_(WarehouseService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInventory_(WarehouseService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCountProducts_(WarehouseService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WarehouseService::Stub::CreateWarehouse(::grpc::ClientContext* context, const ::warehouse::CreateWarehouseRequest& request, ::warehouse::CreateWarehouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::CreateWarehouseRequest, ::warehouse::CreateWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateWarehouse_, context, request, response);
}

void WarehouseService::Stub::async::CreateWarehouse(::grpc::ClientContext* context, const ::warehouse::CreateWarehouseRequest* request, ::warehouse::CreateWarehouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::CreateWarehouseRequest, ::warehouse::CreateWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWarehouse_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::CreateWarehouse(::grpc::ClientContext* context, const ::warehouse::CreateWarehouseRequest* request, ::warehouse::CreateWarehouseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWarehouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateWarehouseResponse>* WarehouseService::Stub::PrepareAsyncCreateWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::CreateWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::CreateWarehouseResponse, ::warehouse::CreateWarehouseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateWarehouse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateWarehouseResponse>* WarehouseService::Stub::AsyncCreateWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::CreateWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateWarehouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::ListWarehouses(::grpc::ClientContext* context, const ::warehouse::ListWarehousesRequest& request, ::warehouse::ListWarehousesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::ListWarehousesRequest, ::warehouse::ListWarehousesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListWarehouses_, context, request, response);
}

void WarehouseService::Stub::async::ListWarehouses(::grpc::ClientContext* context, const ::warehouse::ListWarehousesRequest* request, ::warehouse::ListWarehousesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::ListWarehousesRequest, ::warehouse::ListWarehousesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWarehouses_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::ListWarehouses(::grpc::ClientContext* context, const ::warehouse::ListWarehousesRequest* request, ::warehouse::ListWarehousesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWarehouses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListWarehousesResponse>* WarehouseService::Stub::PrepareAsyncListWarehousesRaw(::grpc::ClientContext* context, const ::warehouse::ListWarehousesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::ListWarehousesResponse, ::warehouse::ListWarehousesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListWarehouses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListWarehousesResponse>* WarehouseService::Stub::AsyncListWarehousesRaw(::grpc::ClientContext* context, const ::warehouse::ListWarehousesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListWarehousesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::UpdateWarehouse(::grpc::ClientContext* context, const ::warehouse::UpdateWarehouseRequest& request, ::warehouse::UpdateWarehouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::UpdateWarehouseRequest, ::warehouse::UpdateWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateWarehouse_, context, request, response);
}

void WarehouseService::Stub::async::UpdateWarehouse(::grpc::ClientContext* context, const ::warehouse::UpdateWarehouseRequest* request, ::warehouse::UpdateWarehouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::UpdateWarehouseRequest, ::warehouse::UpdateWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWarehouse_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::UpdateWarehouse(::grpc::ClientContext* context, const ::warehouse::UpdateWarehouseRequest* request, ::warehouse::UpdateWarehouseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWarehouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::UpdateWarehouseResponse>* WarehouseService::Stub::PrepareAsyncUpdateWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::UpdateWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::UpdateWarehouseResponse, ::warehouse::UpdateWarehouseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateWarehouse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::UpdateWarehouseResponse>* WarehouseService::Stub::AsyncUpdateWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::UpdateWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateWarehouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetProductsInWarehouse(::grpc::ClientContext* context, const ::warehouse::GetProductsInWarehouseRequest& request, ::warehouse::GetProductsInWarehouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetProductsInWarehouseRequest, ::warehouse::GetProductsInWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProductsInWarehouse_, context, request, response);
}

void WarehouseService::Stub::async::GetProductsInWarehouse(::grpc::ClientContext* context, const ::warehouse::GetProductsInWarehouseRequest* request, ::warehouse::GetProductsInWarehouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetProductsInWarehouseRequest, ::warehouse::GetProductsInWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProductsInWarehouse_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetProductsInWarehouse(::grpc::ClientContext* context, const ::warehouse::GetProductsInWarehouseRequest* request, ::warehouse::GetProductsInWarehouseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProductsInWarehouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetProductsInWarehouseResponse>* WarehouseService::Stub::PrepareAsyncGetProductsInWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::GetProductsInWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetProductsInWarehouseResponse, ::warehouse::GetProductsInWarehouseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProductsInWarehouse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetProductsInWarehouseResponse>* WarehouseService::Stub::AsyncGetProductsInWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::GetProductsInWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProductsInWarehouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetWarehouseAnalytics(::grpc::ClientContext* context, const ::warehouse::GetWarehouseAnalyticsRequest& request, ::warehouse::GetWarehouseAnalyticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetWarehouseAnalyticsRequest, ::warehouse::GetWarehouseAnalyticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWarehouseAnalytics_, context, request, response);
}

void WarehouseService::Stub::async::GetWarehouseAnalytics(::grpc::ClientContext* context, const ::warehouse::GetWarehouseAnalyticsRequest* request, ::warehouse::GetWarehouseAnalyticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetWarehouseAnalyticsRequest, ::warehouse::GetWarehouseAnalyticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWarehouseAnalytics_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetWarehouseAnalytics(::grpc::ClientContext* context, const ::warehouse::GetWarehouseAnalyticsRequest* request, ::warehouse::GetWarehouseAnalyticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWarehouseAnalytics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetWarehouseAnalyticsResponse>* WarehouseService::Stub::PrepareAsyncGetWarehouseAnalyticsRaw(::grpc::ClientContext* context, const ::warehouse::GetWarehouseAnalyticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetWarehouseAnalyticsResponse, ::warehouse::GetWarehouseAnalyticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWarehouseAnalytics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetWarehouseAnalyticsResponse>* WarehouseService::Stub::AsyncGetWarehouseAnalyticsRaw(::grpc::ClientContext* context, const ::warehouse::GetWarehouseAnalyticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWarehouseAnalyticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::AddProductToWarehouse(::grpc::ClientContext* context, const ::warehouse::AddProductToWarehouseRequest& request, ::warehouse::AddProductToWarehouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::AddProductToWarehouseRequest, ::warehouse::AddProductToWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddProductToWarehouse_, context, request, response);
}

void WarehouseService::Stub::async::AddProductToWarehouse(::grpc::ClientContext* context, const ::warehouse::AddProductToWarehouseRequest* request, ::warehouse::AddProductToWarehouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::AddProductToWarehouseRequest, ::warehouse::AddProductToWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddProductToWarehouse_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::AddProductToWarehouse(::grpc::ClientContext* context, const ::warehouse::AddProductToWarehouseRequest* request, ::warehouse::AddProductToWarehouseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddProductToWarehouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::AddProductToWarehouseResponse>* WarehouseService::Stub::PrepareAsyncAddProductToWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::AddProductToWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::AddProductToWarehouseResponse, ::warehouse::AddProductToWarehouseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddProductToWarehouse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::AddProductToWarehouseResponse>* WarehouseService::Stub::AsyncAddProductToWarehouseRaw(::grpc::ClientContext* context, const ::warehouse::AddProductToWarehouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddProductToWarehouseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::CreateAcceptance(::grpc::ClientContext* context, const ::warehouse::CreateAcceptanceRequest& request, ::warehouse::CreateAcceptanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::CreateAcceptanceRequest, ::warehouse::CreateAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAcceptance_, context, request, response);
}

void WarehouseService::Stub::async::CreateAcceptance(::grpc::ClientContext* context, const ::warehouse::CreateAcceptanceRequest* request, ::warehouse::CreateAcceptanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::CreateAcceptanceRequest, ::warehouse::CreateAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAcceptance_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::CreateAcceptance(::grpc::ClientContext* context, const ::warehouse::CreateAcceptanceRequest* request, ::warehouse::CreateAcceptanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAcceptance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateAcceptanceResponse>* WarehouseService::Stub::PrepareAsyncCreateAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::CreateAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::CreateAcceptanceResponse, ::warehouse::CreateAcceptanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAcceptance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateAcceptanceResponse>* WarehouseService::Stub::AsyncCreateAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::CreateAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAcceptanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetAcceptance(::grpc::ClientContext* context, const ::warehouse::GetAcceptanceRequest& request, ::warehouse::GetAcceptanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetAcceptanceRequest, ::warehouse::GetAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAcceptance_, context, request, response);
}

void WarehouseService::Stub::async::GetAcceptance(::grpc::ClientContext* context, const ::warehouse::GetAcceptanceRequest* request, ::warehouse::GetAcceptanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetAcceptanceRequest, ::warehouse::GetAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAcceptance_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetAcceptance(::grpc::ClientContext* context, const ::warehouse::GetAcceptanceRequest* request, ::warehouse::GetAcceptanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAcceptance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetAcceptanceResponse>* WarehouseService::Stub::PrepareAsyncGetAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::GetAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetAcceptanceResponse, ::warehouse::GetAcceptanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAcceptance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetAcceptanceResponse>* WarehouseService::Stub::AsyncGetAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::GetAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAcceptanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::ListAcceptances(::grpc::ClientContext* context, const ::warehouse::ListAcceptancesRequest& request, ::warehouse::ListAcceptancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::ListAcceptancesRequest, ::warehouse::ListAcceptancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAcceptances_, context, request, response);
}

void WarehouseService::Stub::async::ListAcceptances(::grpc::ClientContext* context, const ::warehouse::ListAcceptancesRequest* request, ::warehouse::ListAcceptancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::ListAcceptancesRequest, ::warehouse::ListAcceptancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAcceptances_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::ListAcceptances(::grpc::ClientContext* context, const ::warehouse::ListAcceptancesRequest* request, ::warehouse::ListAcceptancesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAcceptances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListAcceptancesResponse>* WarehouseService::Stub::PrepareAsyncListAcceptancesRaw(::grpc::ClientContext* context, const ::warehouse::ListAcceptancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::ListAcceptancesResponse, ::warehouse::ListAcceptancesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAcceptances_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListAcceptancesResponse>* WarehouseService::Stub::AsyncListAcceptancesRaw(::grpc::ClientContext* context, const ::warehouse::ListAcceptancesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAcceptancesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::UpdateAcceptance(::grpc::ClientContext* context, const ::warehouse::UpdateAcceptanceRequest& request, ::warehouse::UpdateAcceptanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::UpdateAcceptanceRequest, ::warehouse::UpdateAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAcceptance_, context, request, response);
}

void WarehouseService::Stub::async::UpdateAcceptance(::grpc::ClientContext* context, const ::warehouse::UpdateAcceptanceRequest* request, ::warehouse::UpdateAcceptanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::UpdateAcceptanceRequest, ::warehouse::UpdateAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAcceptance_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::UpdateAcceptance(::grpc::ClientContext* context, const ::warehouse::UpdateAcceptanceRequest* request, ::warehouse::UpdateAcceptanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAcceptance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::UpdateAcceptanceResponse>* WarehouseService::Stub::PrepareAsyncUpdateAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::UpdateAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::UpdateAcceptanceResponse, ::warehouse::UpdateAcceptanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAcceptance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::UpdateAcceptanceResponse>* WarehouseService::Stub::AsyncUpdateAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::UpdateAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAcceptanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::DeleteAcceptance(::grpc::ClientContext* context, const ::warehouse::DeleteAcceptanceRequest& request, ::warehouse::DeleteAcceptanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::DeleteAcceptanceRequest, ::warehouse::DeleteAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAcceptance_, context, request, response);
}

void WarehouseService::Stub::async::DeleteAcceptance(::grpc::ClientContext* context, const ::warehouse::DeleteAcceptanceRequest* request, ::warehouse::DeleteAcceptanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::DeleteAcceptanceRequest, ::warehouse::DeleteAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAcceptance_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::DeleteAcceptance(::grpc::ClientContext* context, const ::warehouse::DeleteAcceptanceRequest* request, ::warehouse::DeleteAcceptanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAcceptance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::DeleteAcceptanceResponse>* WarehouseService::Stub::PrepareAsyncDeleteAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::DeleteAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::DeleteAcceptanceResponse, ::warehouse::DeleteAcceptanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAcceptance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::DeleteAcceptanceResponse>* WarehouseService::Stub::AsyncDeleteAcceptanceRaw(::grpc::ClientContext* context, const ::warehouse::DeleteAcceptanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAcceptanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::CreateWriteOff(::grpc::ClientContext* context, const ::warehouse::CreateWriteOffRequest& request, ::warehouse::CreateWriteOffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::CreateWriteOffRequest, ::warehouse::CreateWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateWriteOff_, context, request, response);
}

void WarehouseService::Stub::async::CreateWriteOff(::grpc::ClientContext* context, const ::warehouse::CreateWriteOffRequest* request, ::warehouse::CreateWriteOffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::CreateWriteOffRequest, ::warehouse::CreateWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWriteOff_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::CreateWriteOff(::grpc::ClientContext* context, const ::warehouse::CreateWriteOffRequest* request, ::warehouse::CreateWriteOffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWriteOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateWriteOffResponse>* WarehouseService::Stub::PrepareAsyncCreateWriteOffRaw(::grpc::ClientContext* context, const ::warehouse::CreateWriteOffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::CreateWriteOffResponse, ::warehouse::CreateWriteOffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateWriteOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateWriteOffResponse>* WarehouseService::Stub::AsyncCreateWriteOffRaw(::grpc::ClientContext* context, const ::warehouse::CreateWriteOffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateWriteOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetWriteOff(::grpc::ClientContext* context, const ::warehouse::GetWriteOffRequest& request, ::warehouse::GetWriteOffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetWriteOffRequest, ::warehouse::GetWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWriteOff_, context, request, response);
}

void WarehouseService::Stub::async::GetWriteOff(::grpc::ClientContext* context, const ::warehouse::GetWriteOffRequest* request, ::warehouse::GetWriteOffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetWriteOffRequest, ::warehouse::GetWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWriteOff_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetWriteOff(::grpc::ClientContext* context, const ::warehouse::GetWriteOffRequest* request, ::warehouse::GetWriteOffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWriteOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetWriteOffResponse>* WarehouseService::Stub::PrepareAsyncGetWriteOffRaw(::grpc::ClientContext* context, const ::warehouse::GetWriteOffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetWriteOffResponse, ::warehouse::GetWriteOffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWriteOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetWriteOffResponse>* WarehouseService::Stub::AsyncGetWriteOffRaw(::grpc::ClientContext* context, const ::warehouse::GetWriteOffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWriteOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::ListWriteOff(::grpc::ClientContext* context, const ::warehouse::ListWriteOffRequest& request, ::warehouse::ListWriteOffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::ListWriteOffRequest, ::warehouse::ListWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListWriteOff_, context, request, response);
}

void WarehouseService::Stub::async::ListWriteOff(::grpc::ClientContext* context, const ::warehouse::ListWriteOffRequest* request, ::warehouse::ListWriteOffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::ListWriteOffRequest, ::warehouse::ListWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWriteOff_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::ListWriteOff(::grpc::ClientContext* context, const ::warehouse::ListWriteOffRequest* request, ::warehouse::ListWriteOffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWriteOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListWriteOffResponse>* WarehouseService::Stub::PrepareAsyncListWriteOffRaw(::grpc::ClientContext* context, const ::warehouse::ListWriteOffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::ListWriteOffResponse, ::warehouse::ListWriteOffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListWriteOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListWriteOffResponse>* WarehouseService::Stub::AsyncListWriteOffRaw(::grpc::ClientContext* context, const ::warehouse::ListWriteOffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListWriteOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::CreateMoving(::grpc::ClientContext* context, const ::warehouse::CreateMovingRequest& request, ::warehouse::CreateMovingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::CreateMovingRequest, ::warehouse::CreateMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateMoving_, context, request, response);
}

void WarehouseService::Stub::async::CreateMoving(::grpc::ClientContext* context, const ::warehouse::CreateMovingRequest* request, ::warehouse::CreateMovingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::CreateMovingRequest, ::warehouse::CreateMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMoving_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::CreateMoving(::grpc::ClientContext* context, const ::warehouse::CreateMovingRequest* request, ::warehouse::CreateMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMoving_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateMovingResponse>* WarehouseService::Stub::PrepareAsyncCreateMovingRaw(::grpc::ClientContext* context, const ::warehouse::CreateMovingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::CreateMovingResponse, ::warehouse::CreateMovingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateMoving_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateMovingResponse>* WarehouseService::Stub::AsyncCreateMovingRaw(::grpc::ClientContext* context, const ::warehouse::CreateMovingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateMovingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetMoving(::grpc::ClientContext* context, const ::warehouse::GetMovingRequest& request, ::warehouse::GetMovingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetMovingRequest, ::warehouse::GetMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMoving_, context, request, response);
}

void WarehouseService::Stub::async::GetMoving(::grpc::ClientContext* context, const ::warehouse::GetMovingRequest* request, ::warehouse::GetMovingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetMovingRequest, ::warehouse::GetMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMoving_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetMoving(::grpc::ClientContext* context, const ::warehouse::GetMovingRequest* request, ::warehouse::GetMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMoving_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetMovingResponse>* WarehouseService::Stub::PrepareAsyncGetMovingRaw(::grpc::ClientContext* context, const ::warehouse::GetMovingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetMovingResponse, ::warehouse::GetMovingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMoving_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetMovingResponse>* WarehouseService::Stub::AsyncGetMovingRaw(::grpc::ClientContext* context, const ::warehouse::GetMovingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMovingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::ListMoving(::grpc::ClientContext* context, const ::warehouse::ListMovingRequest& request, ::warehouse::ListMovingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::ListMovingRequest, ::warehouse::ListMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListMoving_, context, request, response);
}

void WarehouseService::Stub::async::ListMoving(::grpc::ClientContext* context, const ::warehouse::ListMovingRequest* request, ::warehouse::ListMovingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::ListMovingRequest, ::warehouse::ListMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMoving_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::ListMoving(::grpc::ClientContext* context, const ::warehouse::ListMovingRequest* request, ::warehouse::ListMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMoving_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListMovingResponse>* WarehouseService::Stub::PrepareAsyncListMovingRaw(::grpc::ClientContext* context, const ::warehouse::ListMovingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::ListMovingResponse, ::warehouse::ListMovingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListMoving_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListMovingResponse>* WarehouseService::Stub::AsyncListMovingRaw(::grpc::ClientContext* context, const ::warehouse::ListMovingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListMovingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::CreateInventory(::grpc::ClientContext* context, const ::warehouse::CreateInventoryRequest& request, ::warehouse::CreateInventoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::CreateInventoryRequest, ::warehouse::CreateInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateInventory_, context, request, response);
}

void WarehouseService::Stub::async::CreateInventory(::grpc::ClientContext* context, const ::warehouse::CreateInventoryRequest* request, ::warehouse::CreateInventoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::CreateInventoryRequest, ::warehouse::CreateInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInventory_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::CreateInventory(::grpc::ClientContext* context, const ::warehouse::CreateInventoryRequest* request, ::warehouse::CreateInventoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateInventoryResponse>* WarehouseService::Stub::PrepareAsyncCreateInventoryRaw(::grpc::ClientContext* context, const ::warehouse::CreateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::CreateInventoryResponse, ::warehouse::CreateInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::CreateInventoryResponse>* WarehouseService::Stub::AsyncCreateInventoryRaw(::grpc::ClientContext* context, const ::warehouse::CreateInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetInventory(::grpc::ClientContext* context, const ::warehouse::GetInventoryRequest& request, ::warehouse::GetInventoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetInventoryRequest, ::warehouse::GetInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInventory_, context, request, response);
}

void WarehouseService::Stub::async::GetInventory(::grpc::ClientContext* context, const ::warehouse::GetInventoryRequest* request, ::warehouse::GetInventoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetInventoryRequest, ::warehouse::GetInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInventory_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetInventory(::grpc::ClientContext* context, const ::warehouse::GetInventoryRequest* request, ::warehouse::GetInventoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetInventoryResponse>* WarehouseService::Stub::PrepareAsyncGetInventoryRaw(::grpc::ClientContext* context, const ::warehouse::GetInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetInventoryResponse, ::warehouse::GetInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetInventoryResponse>* WarehouseService::Stub::AsyncGetInventoryRaw(::grpc::ClientContext* context, const ::warehouse::GetInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::ListInventory(::grpc::ClientContext* context, const ::warehouse::ListInventoryRequest& request, ::warehouse::ListInventoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::ListInventoryRequest, ::warehouse::ListInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListInventory_, context, request, response);
}

void WarehouseService::Stub::async::ListInventory(::grpc::ClientContext* context, const ::warehouse::ListInventoryRequest* request, ::warehouse::ListInventoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::ListInventoryRequest, ::warehouse::ListInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInventory_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::ListInventory(::grpc::ClientContext* context, const ::warehouse::ListInventoryRequest* request, ::warehouse::ListInventoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListInventoryResponse>* WarehouseService::Stub::PrepareAsyncListInventoryRaw(::grpc::ClientContext* context, const ::warehouse::ListInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::ListInventoryResponse, ::warehouse::ListInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::ListInventoryResponse>* WarehouseService::Stub::AsyncListInventoryRaw(::grpc::ClientContext* context, const ::warehouse::ListInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarehouseService::Stub::GetCountProducts(::grpc::ClientContext* context, const ::warehouse::GetCountProductsRequest& request, ::warehouse::GetCountProductsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::warehouse::GetCountProductsRequest, ::warehouse::GetCountProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCountProducts_, context, request, response);
}

void WarehouseService::Stub::async::GetCountProducts(::grpc::ClientContext* context, const ::warehouse::GetCountProductsRequest* request, ::warehouse::GetCountProductsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::warehouse::GetCountProductsRequest, ::warehouse::GetCountProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCountProducts_, context, request, response, std::move(f));
}

void WarehouseService::Stub::async::GetCountProducts(::grpc::ClientContext* context, const ::warehouse::GetCountProductsRequest* request, ::warehouse::GetCountProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCountProducts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetCountProductsResponse>* WarehouseService::Stub::PrepareAsyncGetCountProductsRaw(::grpc::ClientContext* context, const ::warehouse::GetCountProductsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::warehouse::GetCountProductsResponse, ::warehouse::GetCountProductsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCountProducts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::warehouse::GetCountProductsResponse>* WarehouseService::Stub::AsyncGetCountProductsRaw(::grpc::ClientContext* context, const ::warehouse::GetCountProductsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCountProductsRaw(context, request, cq);
  result->StartCall();
  return result;
}

WarehouseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::CreateWarehouseRequest, ::warehouse::CreateWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::CreateWarehouseRequest* req,
             ::warehouse::CreateWarehouseResponse* resp) {
               return service->CreateWarehouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::ListWarehousesRequest, ::warehouse::ListWarehousesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::ListWarehousesRequest* req,
             ::warehouse::ListWarehousesResponse* resp) {
               return service->ListWarehouses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::UpdateWarehouseRequest, ::warehouse::UpdateWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::UpdateWarehouseRequest* req,
             ::warehouse::UpdateWarehouseResponse* resp) {
               return service->UpdateWarehouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetProductsInWarehouseRequest, ::warehouse::GetProductsInWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetProductsInWarehouseRequest* req,
             ::warehouse::GetProductsInWarehouseResponse* resp) {
               return service->GetProductsInWarehouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetWarehouseAnalyticsRequest, ::warehouse::GetWarehouseAnalyticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetWarehouseAnalyticsRequest* req,
             ::warehouse::GetWarehouseAnalyticsResponse* resp) {
               return service->GetWarehouseAnalytics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::AddProductToWarehouseRequest, ::warehouse::AddProductToWarehouseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::AddProductToWarehouseRequest* req,
             ::warehouse::AddProductToWarehouseResponse* resp) {
               return service->AddProductToWarehouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::CreateAcceptanceRequest, ::warehouse::CreateAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::CreateAcceptanceRequest* req,
             ::warehouse::CreateAcceptanceResponse* resp) {
               return service->CreateAcceptance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetAcceptanceRequest, ::warehouse::GetAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetAcceptanceRequest* req,
             ::warehouse::GetAcceptanceResponse* resp) {
               return service->GetAcceptance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::ListAcceptancesRequest, ::warehouse::ListAcceptancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::ListAcceptancesRequest* req,
             ::warehouse::ListAcceptancesResponse* resp) {
               return service->ListAcceptances(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::UpdateAcceptanceRequest, ::warehouse::UpdateAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::UpdateAcceptanceRequest* req,
             ::warehouse::UpdateAcceptanceResponse* resp) {
               return service->UpdateAcceptance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::DeleteAcceptanceRequest, ::warehouse::DeleteAcceptanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::DeleteAcceptanceRequest* req,
             ::warehouse::DeleteAcceptanceResponse* resp) {
               return service->DeleteAcceptance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::CreateWriteOffRequest, ::warehouse::CreateWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::CreateWriteOffRequest* req,
             ::warehouse::CreateWriteOffResponse* resp) {
               return service->CreateWriteOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetWriteOffRequest, ::warehouse::GetWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetWriteOffRequest* req,
             ::warehouse::GetWriteOffResponse* resp) {
               return service->GetWriteOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::ListWriteOffRequest, ::warehouse::ListWriteOffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::ListWriteOffRequest* req,
             ::warehouse::ListWriteOffResponse* resp) {
               return service->ListWriteOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::CreateMovingRequest, ::warehouse::CreateMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::CreateMovingRequest* req,
             ::warehouse::CreateMovingResponse* resp) {
               return service->CreateMoving(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetMovingRequest, ::warehouse::GetMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetMovingRequest* req,
             ::warehouse::GetMovingResponse* resp) {
               return service->GetMoving(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::ListMovingRequest, ::warehouse::ListMovingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::ListMovingRequest* req,
             ::warehouse::ListMovingResponse* resp) {
               return service->ListMoving(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::CreateInventoryRequest, ::warehouse::CreateInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::CreateInventoryRequest* req,
             ::warehouse::CreateInventoryResponse* resp) {
               return service->CreateInventory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetInventoryRequest, ::warehouse::GetInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetInventoryRequest* req,
             ::warehouse::GetInventoryResponse* resp) {
               return service->GetInventory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::ListInventoryRequest, ::warehouse::ListInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::ListInventoryRequest* req,
             ::warehouse::ListInventoryResponse* resp) {
               return service->ListInventory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarehouseService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarehouseService::Service, ::warehouse::GetCountProductsRequest, ::warehouse::GetCountProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarehouseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::warehouse::GetCountProductsRequest* req,
             ::warehouse::GetCountProductsResponse* resp) {
               return service->GetCountProducts(ctx, req, resp);
             }, this)));
}

WarehouseService::Service::~Service() {
}

::grpc::Status WarehouseService::Service::CreateWarehouse(::grpc::ServerContext* context, const ::warehouse::CreateWarehouseRequest* request, ::warehouse::CreateWarehouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::ListWarehouses(::grpc::ServerContext* context, const ::warehouse::ListWarehousesRequest* request, ::warehouse::ListWarehousesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::UpdateWarehouse(::grpc::ServerContext* context, const ::warehouse::UpdateWarehouseRequest* request, ::warehouse::UpdateWarehouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetProductsInWarehouse(::grpc::ServerContext* context, const ::warehouse::GetProductsInWarehouseRequest* request, ::warehouse::GetProductsInWarehouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetWarehouseAnalytics(::grpc::ServerContext* context, const ::warehouse::GetWarehouseAnalyticsRequest* request, ::warehouse::GetWarehouseAnalyticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::AddProductToWarehouse(::grpc::ServerContext* context, const ::warehouse::AddProductToWarehouseRequest* request, ::warehouse::AddProductToWarehouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::CreateAcceptance(::grpc::ServerContext* context, const ::warehouse::CreateAcceptanceRequest* request, ::warehouse::CreateAcceptanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetAcceptance(::grpc::ServerContext* context, const ::warehouse::GetAcceptanceRequest* request, ::warehouse::GetAcceptanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::ListAcceptances(::grpc::ServerContext* context, const ::warehouse::ListAcceptancesRequest* request, ::warehouse::ListAcceptancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::UpdateAcceptance(::grpc::ServerContext* context, const ::warehouse::UpdateAcceptanceRequest* request, ::warehouse::UpdateAcceptanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::DeleteAcceptance(::grpc::ServerContext* context, const ::warehouse::DeleteAcceptanceRequest* request, ::warehouse::DeleteAcceptanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::CreateWriteOff(::grpc::ServerContext* context, const ::warehouse::CreateWriteOffRequest* request, ::warehouse::CreateWriteOffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetWriteOff(::grpc::ServerContext* context, const ::warehouse::GetWriteOffRequest* request, ::warehouse::GetWriteOffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::ListWriteOff(::grpc::ServerContext* context, const ::warehouse::ListWriteOffRequest* request, ::warehouse::ListWriteOffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::CreateMoving(::grpc::ServerContext* context, const ::warehouse::CreateMovingRequest* request, ::warehouse::CreateMovingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetMoving(::grpc::ServerContext* context, const ::warehouse::GetMovingRequest* request, ::warehouse::GetMovingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::ListMoving(::grpc::ServerContext* context, const ::warehouse::ListMovingRequest* request, ::warehouse::ListMovingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::CreateInventory(::grpc::ServerContext* context, const ::warehouse::CreateInventoryRequest* request, ::warehouse::CreateInventoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetInventory(::grpc::ServerContext* context, const ::warehouse::GetInventoryRequest* request, ::warehouse::GetInventoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::ListInventory(::grpc::ServerContext* context, const ::warehouse::ListInventoryRequest* request, ::warehouse::ListInventoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarehouseService::Service::GetCountProducts(::grpc::ServerContext* context, const ::warehouse::GetCountProductsRequest* request, ::warehouse::GetCountProductsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace warehouse


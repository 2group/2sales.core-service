// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: b2c_service_order/b2c_service_order.proto

package b2c_service_orderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	B2CServiceOrderService_CreateOrder_FullMethodName = "/b2c_service_order.B2CServiceOrderService/CreateOrder"
	B2CServiceOrderService_GetOrder_FullMethodName    = "/b2c_service_order.B2CServiceOrderService/GetOrder"
	B2CServiceOrderService_ListOrders_FullMethodName  = "/b2c_service_order.B2CServiceOrderService/ListOrders"
)

// B2CServiceOrderServiceClient is the client API for B2CServiceOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type B2CServiceOrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	ListOrders(ctx context.Context, in *ListB2CServiceOrdersRequest, opts ...grpc.CallOption) (*ListB2CServiceOrdersResponse, error)
}

type b2CServiceOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewB2CServiceOrderServiceClient(cc grpc.ClientConnInterface) B2CServiceOrderServiceClient {
	return &b2CServiceOrderServiceClient{cc}
}

func (c *b2CServiceOrderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, B2CServiceOrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CServiceOrderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, B2CServiceOrderService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CServiceOrderServiceClient) ListOrders(ctx context.Context, in *ListB2CServiceOrdersRequest, opts ...grpc.CallOption) (*ListB2CServiceOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListB2CServiceOrdersResponse)
	err := c.cc.Invoke(ctx, B2CServiceOrderService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// B2CServiceOrderServiceServer is the server API for B2CServiceOrderService service.
// All implementations must embed UnimplementedB2CServiceOrderServiceServer
// for forward compatibility.
type B2CServiceOrderServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	ListOrders(context.Context, *ListB2CServiceOrdersRequest) (*ListB2CServiceOrdersResponse, error)
	mustEmbedUnimplementedB2CServiceOrderServiceServer()
}

// UnimplementedB2CServiceOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedB2CServiceOrderServiceServer struct{}

func (UnimplementedB2CServiceOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedB2CServiceOrderServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedB2CServiceOrderServiceServer) ListOrders(context.Context, *ListB2CServiceOrdersRequest) (*ListB2CServiceOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedB2CServiceOrderServiceServer) mustEmbedUnimplementedB2CServiceOrderServiceServer() {
}
func (UnimplementedB2CServiceOrderServiceServer) testEmbeddedByValue() {}

// UnsafeB2CServiceOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to B2CServiceOrderServiceServer will
// result in compilation errors.
type UnsafeB2CServiceOrderServiceServer interface {
	mustEmbedUnimplementedB2CServiceOrderServiceServer()
}

func RegisterB2CServiceOrderServiceServer(s grpc.ServiceRegistrar, srv B2CServiceOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedB2CServiceOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&B2CServiceOrderService_ServiceDesc, srv)
}

func _B2CServiceOrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CServiceOrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2CServiceOrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CServiceOrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CServiceOrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CServiceOrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2CServiceOrderService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CServiceOrderServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CServiceOrderService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListB2CServiceOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CServiceOrderServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2CServiceOrderService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CServiceOrderServiceServer).ListOrders(ctx, req.(*ListB2CServiceOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// B2CServiceOrderService_ServiceDesc is the grpc.ServiceDesc for B2CServiceOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var B2CServiceOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b2c_service_order.B2CServiceOrderService",
	HandlerType: (*B2CServiceOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _B2CServiceOrderService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _B2CServiceOrderService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _B2CServiceOrderService_ListOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "b2c_service_order/b2c_service_order.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: order/order.proto

package orderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateSubOrder_FullMethodName = "/order.OrderService/CreateSubOrder"
	OrderService_GetSubOrder_FullMethodName    = "/order.OrderService/GetSubOrder"
	OrderService_UpdateSubOrder_FullMethodName = "/order.OrderService/UpdateSubOrder"
	OrderService_ListSubOrder_FullMethodName   = "/order.OrderService/ListSubOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateSubOrder(ctx context.Context, in *CreateSubOrderRequest, opts ...grpc.CallOption) (*CreateSubOrderResponse, error)
	GetSubOrder(ctx context.Context, in *GetSubOrderRequest, opts ...grpc.CallOption) (*GetSubOrderResponse, error)
	UpdateSubOrder(ctx context.Context, in *UpdateSubOrderRequest, opts ...grpc.CallOption) (*UpdateSubOrderResponse, error)
	ListSubOrder(ctx context.Context, in *ListSubOrderRequest, opts ...grpc.CallOption) (*ListSubOrderResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateSubOrder(ctx context.Context, in *CreateSubOrderRequest, opts ...grpc.CallOption) (*CreateSubOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateSubOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSubOrder(ctx context.Context, in *GetSubOrderRequest, opts ...grpc.CallOption) (*GetSubOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetSubOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateSubOrder(ctx context.Context, in *UpdateSubOrderRequest, opts ...grpc.CallOption) (*UpdateSubOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_UpdateSubOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListSubOrder(ctx context.Context, in *ListSubOrderRequest, opts ...grpc.CallOption) (*ListSubOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ListSubOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	CreateSubOrder(context.Context, *CreateSubOrderRequest) (*CreateSubOrderResponse, error)
	GetSubOrder(context.Context, *GetSubOrderRequest) (*GetSubOrderResponse, error)
	UpdateSubOrder(context.Context, *UpdateSubOrderRequest) (*UpdateSubOrderResponse, error)
	ListSubOrder(context.Context, *ListSubOrderRequest) (*ListSubOrderResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateSubOrder(context.Context, *CreateSubOrderRequest) (*CreateSubOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetSubOrder(context.Context, *GetSubOrderRequest) (*GetSubOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubOrder not implemented")
}
func (UnimplementedOrderServiceServer) UpdateSubOrder(context.Context, *UpdateSubOrderRequest) (*UpdateSubOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubOrder not implemented")
}
func (UnimplementedOrderServiceServer) ListSubOrder(context.Context, *ListSubOrderRequest) (*ListSubOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateSubOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateSubOrder(ctx, req.(*CreateSubOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetSubOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSubOrder(ctx, req.(*GetSubOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateSubOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateSubOrder(ctx, req.(*UpdateSubOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListSubOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListSubOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListSubOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListSubOrder(ctx, req.(*ListSubOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubOrder",
			Handler:    _OrderService_CreateSubOrder_Handler,
		},
		{
			MethodName: "GetSubOrder",
			Handler:    _OrderService_GetSubOrder_Handler,
		},
		{
			MethodName: "UpdateSubOrder",
			Handler:    _OrderService_UpdateSubOrder_Handler,
		},
		{
			MethodName: "ListSubOrder",
			Handler:    _OrderService_ListSubOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: warehouse/warehouse.proto

package warehousev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WarehouseService_CreateWarehouse_FullMethodName        = "/warehouse.WarehouseService/CreateWarehouse"
	WarehouseService_ListWarehouses_FullMethodName         = "/warehouse.WarehouseService/ListWarehouses"
	WarehouseService_UpdateWarehouse_FullMethodName        = "/warehouse.WarehouseService/UpdateWarehouse"
	WarehouseService_GetProductsInWarehouse_FullMethodName = "/warehouse.WarehouseService/GetProductsInWarehouse"
	WarehouseService_GetWarehouseAnalytics_FullMethodName  = "/warehouse.WarehouseService/GetWarehouseAnalytics"
	WarehouseService_AddProductToWarehouse_FullMethodName  = "/warehouse.WarehouseService/AddProductToWarehouse"
	WarehouseService_CreateAcceptance_FullMethodName       = "/warehouse.WarehouseService/CreateAcceptance"
	WarehouseService_GetAcceptance_FullMethodName          = "/warehouse.WarehouseService/GetAcceptance"
	WarehouseService_ListAcceptances_FullMethodName        = "/warehouse.WarehouseService/ListAcceptances"
	WarehouseService_UpdateAcceptance_FullMethodName       = "/warehouse.WarehouseService/UpdateAcceptance"
	WarehouseService_DeleteAcceptance_FullMethodName       = "/warehouse.WarehouseService/DeleteAcceptance"
	WarehouseService_CreateWriteOff_FullMethodName         = "/warehouse.WarehouseService/CreateWriteOff"
	WarehouseService_GetWriteOff_FullMethodName            = "/warehouse.WarehouseService/GetWriteOff"
	WarehouseService_ListWriteOff_FullMethodName           = "/warehouse.WarehouseService/ListWriteOff"
	WarehouseService_CreateMoving_FullMethodName           = "/warehouse.WarehouseService/CreateMoving"
	WarehouseService_GetMoving_FullMethodName              = "/warehouse.WarehouseService/GetMoving"
	WarehouseService_ListMoving_FullMethodName             = "/warehouse.WarehouseService/ListMoving"
	WarehouseService_CreateInventory_FullMethodName        = "/warehouse.WarehouseService/CreateInventory"
	WarehouseService_GetInventory_FullMethodName           = "/warehouse.WarehouseService/GetInventory"
	WarehouseService_ListInventory_FullMethodName          = "/warehouse.WarehouseService/ListInventory"
	WarehouseService_GetCountProducts_FullMethodName       = "/warehouse.WarehouseService/GetCountProducts"
)

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error)
	ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error)
	UpdateWarehouse(ctx context.Context, in *UpdateWarehouseRequest, opts ...grpc.CallOption) (*UpdateWarehouseResponse, error)
	GetProductsInWarehouse(ctx context.Context, in *GetProductsInWarehouseRequest, opts ...grpc.CallOption) (*GetProductsInWarehouseResponse, error)
	GetWarehouseAnalytics(ctx context.Context, in *GetWarehouseAnalyticsRequest, opts ...grpc.CallOption) (*GetWarehouseAnalyticsResponse, error)
	AddProductToWarehouse(ctx context.Context, in *AddProductToWarehouseRequest, opts ...grpc.CallOption) (*AddProductToWarehouseResponse, error)
	CreateAcceptance(ctx context.Context, in *CreateAcceptanceRequest, opts ...grpc.CallOption) (*CreateAcceptanceResponse, error)
	GetAcceptance(ctx context.Context, in *GetAcceptanceRequest, opts ...grpc.CallOption) (*GetAcceptanceResponse, error)
	ListAcceptances(ctx context.Context, in *ListAcceptancesRequest, opts ...grpc.CallOption) (*ListAcceptancesResponse, error)
	UpdateAcceptance(ctx context.Context, in *UpdateAcceptanceRequest, opts ...grpc.CallOption) (*UpdateAcceptanceResponse, error)
	DeleteAcceptance(ctx context.Context, in *DeleteAcceptanceRequest, opts ...grpc.CallOption) (*DeleteAcceptanceResponse, error)
	CreateWriteOff(ctx context.Context, in *CreateWriteOffRequest, opts ...grpc.CallOption) (*CreateWriteOffResponse, error)
	GetWriteOff(ctx context.Context, in *GetWriteOffRequest, opts ...grpc.CallOption) (*GetWriteOffResponse, error)
	ListWriteOff(ctx context.Context, in *ListWriteOffRequest, opts ...grpc.CallOption) (*ListWriteOffResponse, error)
	CreateMoving(ctx context.Context, in *CreateMovingRequest, opts ...grpc.CallOption) (*CreateMovingResponse, error)
	GetMoving(ctx context.Context, in *GetMovingRequest, opts ...grpc.CallOption) (*GetMovingResponse, error)
	ListMoving(ctx context.Context, in *ListMovingRequest, opts ...grpc.CallOption) (*ListMovingResponse, error)
	CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*CreateInventoryResponse, error)
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	ListInventory(ctx context.Context, in *ListInventoryRequest, opts ...grpc.CallOption) (*ListInventoryResponse, error)
	GetCountProducts(ctx context.Context, in *GetCountProductsRequest, opts ...grpc.CallOption) (*GetCountProductsResponse, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWarehouseResponse)
	err := c.cc.Invoke(ctx, WarehouseService_CreateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWarehousesResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ListWarehouses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) UpdateWarehouse(ctx context.Context, in *UpdateWarehouseRequest, opts ...grpc.CallOption) (*UpdateWarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWarehouseResponse)
	err := c.cc.Invoke(ctx, WarehouseService_UpdateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetProductsInWarehouse(ctx context.Context, in *GetProductsInWarehouseRequest, opts ...grpc.CallOption) (*GetProductsInWarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsInWarehouseResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetProductsInWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetWarehouseAnalytics(ctx context.Context, in *GetWarehouseAnalyticsRequest, opts ...grpc.CallOption) (*GetWarehouseAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWarehouseAnalyticsResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetWarehouseAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) AddProductToWarehouse(ctx context.Context, in *AddProductToWarehouseRequest, opts ...grpc.CallOption) (*AddProductToWarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductToWarehouseResponse)
	err := c.cc.Invoke(ctx, WarehouseService_AddProductToWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) CreateAcceptance(ctx context.Context, in *CreateAcceptanceRequest, opts ...grpc.CallOption) (*CreateAcceptanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAcceptanceResponse)
	err := c.cc.Invoke(ctx, WarehouseService_CreateAcceptance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetAcceptance(ctx context.Context, in *GetAcceptanceRequest, opts ...grpc.CallOption) (*GetAcceptanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAcceptanceResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetAcceptance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListAcceptances(ctx context.Context, in *ListAcceptancesRequest, opts ...grpc.CallOption) (*ListAcceptancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAcceptancesResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ListAcceptances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) UpdateAcceptance(ctx context.Context, in *UpdateAcceptanceRequest, opts ...grpc.CallOption) (*UpdateAcceptanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAcceptanceResponse)
	err := c.cc.Invoke(ctx, WarehouseService_UpdateAcceptance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) DeleteAcceptance(ctx context.Context, in *DeleteAcceptanceRequest, opts ...grpc.CallOption) (*DeleteAcceptanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAcceptanceResponse)
	err := c.cc.Invoke(ctx, WarehouseService_DeleteAcceptance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) CreateWriteOff(ctx context.Context, in *CreateWriteOffRequest, opts ...grpc.CallOption) (*CreateWriteOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWriteOffResponse)
	err := c.cc.Invoke(ctx, WarehouseService_CreateWriteOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetWriteOff(ctx context.Context, in *GetWriteOffRequest, opts ...grpc.CallOption) (*GetWriteOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWriteOffResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetWriteOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListWriteOff(ctx context.Context, in *ListWriteOffRequest, opts ...grpc.CallOption) (*ListWriteOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWriteOffResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ListWriteOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) CreateMoving(ctx context.Context, in *CreateMovingRequest, opts ...grpc.CallOption) (*CreateMovingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMovingResponse)
	err := c.cc.Invoke(ctx, WarehouseService_CreateMoving_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetMoving(ctx context.Context, in *GetMovingRequest, opts ...grpc.CallOption) (*GetMovingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovingResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetMoving_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListMoving(ctx context.Context, in *ListMovingRequest, opts ...grpc.CallOption) (*ListMovingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMovingResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ListMoving_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*CreateInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInventoryResponse)
	err := c.cc.Invoke(ctx, WarehouseService_CreateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListInventory(ctx context.Context, in *ListInventoryRequest, opts ...grpc.CallOption) (*ListInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInventoryResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ListInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetCountProducts(ctx context.Context, in *GetCountProductsRequest, opts ...grpc.CallOption) (*GetCountProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountProductsResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetCountProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
// All implementations must embed UnimplementedWarehouseServiceServer
// for forward compatibility.
type WarehouseServiceServer interface {
	CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error)
	ListWarehouses(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error)
	UpdateWarehouse(context.Context, *UpdateWarehouseRequest) (*UpdateWarehouseResponse, error)
	GetProductsInWarehouse(context.Context, *GetProductsInWarehouseRequest) (*GetProductsInWarehouseResponse, error)
	GetWarehouseAnalytics(context.Context, *GetWarehouseAnalyticsRequest) (*GetWarehouseAnalyticsResponse, error)
	AddProductToWarehouse(context.Context, *AddProductToWarehouseRequest) (*AddProductToWarehouseResponse, error)
	CreateAcceptance(context.Context, *CreateAcceptanceRequest) (*CreateAcceptanceResponse, error)
	GetAcceptance(context.Context, *GetAcceptanceRequest) (*GetAcceptanceResponse, error)
	ListAcceptances(context.Context, *ListAcceptancesRequest) (*ListAcceptancesResponse, error)
	UpdateAcceptance(context.Context, *UpdateAcceptanceRequest) (*UpdateAcceptanceResponse, error)
	DeleteAcceptance(context.Context, *DeleteAcceptanceRequest) (*DeleteAcceptanceResponse, error)
	CreateWriteOff(context.Context, *CreateWriteOffRequest) (*CreateWriteOffResponse, error)
	GetWriteOff(context.Context, *GetWriteOffRequest) (*GetWriteOffResponse, error)
	ListWriteOff(context.Context, *ListWriteOffRequest) (*ListWriteOffResponse, error)
	CreateMoving(context.Context, *CreateMovingRequest) (*CreateMovingResponse, error)
	GetMoving(context.Context, *GetMovingRequest) (*GetMovingResponse, error)
	ListMoving(context.Context, *ListMovingRequest) (*ListMovingResponse, error)
	CreateInventory(context.Context, *CreateInventoryRequest) (*CreateInventoryResponse, error)
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	ListInventory(context.Context, *ListInventoryRequest) (*ListInventoryResponse, error)
	GetCountProducts(context.Context, *GetCountProductsRequest) (*GetCountProductsResponse, error)
	mustEmbedUnimplementedWarehouseServiceServer()
}

// UnimplementedWarehouseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarehouseServiceServer struct{}

func (UnimplementedWarehouseServiceServer) CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) ListWarehouses(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWarehouses not implemented")
}
func (UnimplementedWarehouseServiceServer) UpdateWarehouse(context.Context, *UpdateWarehouseRequest) (*UpdateWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) GetProductsInWarehouse(context.Context, *GetProductsInWarehouseRequest) (*GetProductsInWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsInWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) GetWarehouseAnalytics(context.Context, *GetWarehouseAnalyticsRequest) (*GetWarehouseAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouseAnalytics not implemented")
}
func (UnimplementedWarehouseServiceServer) AddProductToWarehouse(context.Context, *AddProductToWarehouseRequest) (*AddProductToWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) CreateAcceptance(context.Context, *CreateAcceptanceRequest) (*CreateAcceptanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcceptance not implemented")
}
func (UnimplementedWarehouseServiceServer) GetAcceptance(context.Context, *GetAcceptanceRequest) (*GetAcceptanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceptance not implemented")
}
func (UnimplementedWarehouseServiceServer) ListAcceptances(context.Context, *ListAcceptancesRequest) (*ListAcceptancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAcceptances not implemented")
}
func (UnimplementedWarehouseServiceServer) UpdateAcceptance(context.Context, *UpdateAcceptanceRequest) (*UpdateAcceptanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcceptance not implemented")
}
func (UnimplementedWarehouseServiceServer) DeleteAcceptance(context.Context, *DeleteAcceptanceRequest) (*DeleteAcceptanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcceptance not implemented")
}
func (UnimplementedWarehouseServiceServer) CreateWriteOff(context.Context, *CreateWriteOffRequest) (*CreateWriteOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWriteOff not implemented")
}
func (UnimplementedWarehouseServiceServer) GetWriteOff(context.Context, *GetWriteOffRequest) (*GetWriteOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteOff not implemented")
}
func (UnimplementedWarehouseServiceServer) ListWriteOff(context.Context, *ListWriteOffRequest) (*ListWriteOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWriteOff not implemented")
}
func (UnimplementedWarehouseServiceServer) CreateMoving(context.Context, *CreateMovingRequest) (*CreateMovingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoving not implemented")
}
func (UnimplementedWarehouseServiceServer) GetMoving(context.Context, *GetMovingRequest) (*GetMovingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoving not implemented")
}
func (UnimplementedWarehouseServiceServer) ListMoving(context.Context, *ListMovingRequest) (*ListMovingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMoving not implemented")
}
func (UnimplementedWarehouseServiceServer) CreateInventory(context.Context, *CreateInventoryRequest) (*CreateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventory not implemented")
}
func (UnimplementedWarehouseServiceServer) GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedWarehouseServiceServer) ListInventory(context.Context, *ListInventoryRequest) (*ListInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInventory not implemented")
}
func (UnimplementedWarehouseServiceServer) GetCountProducts(context.Context, *GetCountProductsRequest) (*GetCountProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountProducts not implemented")
}
func (UnimplementedWarehouseServiceServer) mustEmbedUnimplementedWarehouseServiceServer() {}
func (UnimplementedWarehouseServiceServer) testEmbeddedByValue()                          {}

// UnsafeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServiceServer will
// result in compilation errors.
type UnsafeWarehouseServiceServer interface {
	mustEmbedUnimplementedWarehouseServiceServer()
}

func RegisterWarehouseServiceServer(s grpc.ServiceRegistrar, srv WarehouseServiceServer) {
	// If the following call pancis, it indicates UnimplementedWarehouseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WarehouseService_ServiceDesc, srv)
}

func _WarehouseService_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CreateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateWarehouse(ctx, req.(*CreateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWarehousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ListWarehouses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListWarehouses(ctx, req.(*ListWarehousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_UpdateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).UpdateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_UpdateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).UpdateWarehouse(ctx, req.(*UpdateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetProductsInWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsInWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetProductsInWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetProductsInWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetProductsInWarehouse(ctx, req.(*GetProductsInWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetWarehouseAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehouseAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetWarehouseAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetWarehouseAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetWarehouseAnalytics(ctx, req.(*GetWarehouseAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_AddProductToWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).AddProductToWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_AddProductToWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).AddProductToWarehouse(ctx, req.(*AddProductToWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_CreateAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CreateAcceptance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateAcceptance(ctx, req.(*CreateAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetAcceptance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetAcceptance(ctx, req.(*GetAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListAcceptances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAcceptancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListAcceptances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ListAcceptances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListAcceptances(ctx, req.(*ListAcceptancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_UpdateAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).UpdateAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_UpdateAcceptance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).UpdateAcceptance(ctx, req.(*UpdateAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_DeleteAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).DeleteAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_DeleteAcceptance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).DeleteAcceptance(ctx, req.(*DeleteAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_CreateWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CreateWriteOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateWriteOff(ctx, req.(*CreateWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetWriteOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetWriteOff(ctx, req.(*GetWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ListWriteOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListWriteOff(ctx, req.(*ListWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_CreateMoving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateMoving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CreateMoving_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateMoving(ctx, req.(*CreateMovingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetMoving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetMoving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetMoving_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetMoving(ctx, req.(*GetMovingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListMoving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMovingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListMoving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ListMoving_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListMoving(ctx, req.(*ListMovingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_CreateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CreateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateInventory(ctx, req.(*CreateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ListInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListInventory(ctx, req.(*ListInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetCountProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetCountProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetCountProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetCountProducts(ctx, req.(*GetCountProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseService_ServiceDesc is the grpc.ServiceDesc for WarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWarehouse",
			Handler:    _WarehouseService_CreateWarehouse_Handler,
		},
		{
			MethodName: "ListWarehouses",
			Handler:    _WarehouseService_ListWarehouses_Handler,
		},
		{
			MethodName: "UpdateWarehouse",
			Handler:    _WarehouseService_UpdateWarehouse_Handler,
		},
		{
			MethodName: "GetProductsInWarehouse",
			Handler:    _WarehouseService_GetProductsInWarehouse_Handler,
		},
		{
			MethodName: "GetWarehouseAnalytics",
			Handler:    _WarehouseService_GetWarehouseAnalytics_Handler,
		},
		{
			MethodName: "AddProductToWarehouse",
			Handler:    _WarehouseService_AddProductToWarehouse_Handler,
		},
		{
			MethodName: "CreateAcceptance",
			Handler:    _WarehouseService_CreateAcceptance_Handler,
		},
		{
			MethodName: "GetAcceptance",
			Handler:    _WarehouseService_GetAcceptance_Handler,
		},
		{
			MethodName: "ListAcceptances",
			Handler:    _WarehouseService_ListAcceptances_Handler,
		},
		{
			MethodName: "UpdateAcceptance",
			Handler:    _WarehouseService_UpdateAcceptance_Handler,
		},
		{
			MethodName: "DeleteAcceptance",
			Handler:    _WarehouseService_DeleteAcceptance_Handler,
		},
		{
			MethodName: "CreateWriteOff",
			Handler:    _WarehouseService_CreateWriteOff_Handler,
		},
		{
			MethodName: "GetWriteOff",
			Handler:    _WarehouseService_GetWriteOff_Handler,
		},
		{
			MethodName: "ListWriteOff",
			Handler:    _WarehouseService_ListWriteOff_Handler,
		},
		{
			MethodName: "CreateMoving",
			Handler:    _WarehouseService_CreateMoving_Handler,
		},
		{
			MethodName: "GetMoving",
			Handler:    _WarehouseService_GetMoving_Handler,
		},
		{
			MethodName: "ListMoving",
			Handler:    _WarehouseService_ListMoving_Handler,
		},
		{
			MethodName: "CreateInventory",
			Handler:    _WarehouseService_CreateInventory_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _WarehouseService_GetInventory_Handler,
		},
		{
			MethodName: "ListInventory",
			Handler:    _WarehouseService_ListInventory_Handler,
		},
		{
			MethodName: "GetCountProducts",
			Handler:    _WarehouseService_GetCountProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse/warehouse.proto",
}

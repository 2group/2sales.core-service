syntax = "proto3";

package b2c_service_order;

option go_package = "github.com/2group/2sales.core-service/pkg/gen/go/b2c_service_order;b2c_service_orderv1";

import "service/service.proto";
import "customer/customer.proto";

service B2CServiceOrderService {
  rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse);
  rpc GetOrder (GetOrderRequest) returns (GetOrderResponse);
  rpc ListOrders (ListB2CServiceOrdersRequest) returns (ListB2CServiceOrdersResponse);
}

message Order {
  optional int64 id = 1;
  optional int64 customer_id = 2;
  optional customer.Customer customer = 3;

  optional string status = 4;
  optional float original_total_price = 5;
  optional float final_total_price = 6;

  repeated OrderItem order_items = 7;

  optional int64 gift_certificate_id = 8;
  optional float gift_used_amount = 9;

  optional float bonus_used = 10;
  optional int64 branch_id = 11;

  optional string created_at = 12;
  optional string updated_at = 13;
}

message OrderItem {
  int64 id = 1;
  int64 service_order_id = 2;
  int64 service_id = 3;
  int32 quantity = 4;
  float final_price = 5;
  service.Service service = 6;
}


message CreateOrderRequest {
  Order order = 1;
}

message CreateOrderResponse {
  Order order = 1;
}

message UpdateOrderRequest {
  Order order = 1;
}

message UpdateOrderResponse {
  Order order = 1;
}

message GetOrderRequest {
  int64 id = 1;
}

message GetOrderResponse {
  Order order = 1;
}

message ListB2CServiceOrdersRequest {
  optional int64 organization_id = 1;
  optional int64 branch_id = 2;
  optional string created_at_from = 3;
  optional string created_at_to = 4;
  optional double price_from = 5;
  optional double price_to = 6;
  optional string search_text = 7;
  int64 limit = 8;
  int64 offset = 9;
}

message ListB2CServiceOrdersResponse {
  repeated Order orders = 1;
  int64 total_count = 2;
}
